{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Not Exactly C",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#capital_constants"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#constants"
		}
		
		
	],
	"repository": {
		"preprocessor":{
			"patterns": [
				{
					"match":"\\s*#(inlcude|define|ifdef|ifndef|endif|if|elif|undef|line|error|pragma|import|download)\\b",
					"name":"keyword.nxc"
				},
				{
					"match":"##",
					"name":"markup.italic.nxc"
				}
			]
		},
		"variables":{
			"patterns": [
				{
					"name": "variable.language.nxc",
					"match": "\\b__[a-zA-Z]*__\\b"
				},
				{
					"name": "variable.parameter.nxc",
					"match": "\\b&?[a-zA-Z_][0-9a-zA-Z_]*\\b"
				}
			]
		},
		"comments":{
			"patterns":[
				{
					"begin": "//",
					"end": "\n",
					"name":"comment.line.double-slash.nxc",
					"patterns": [
						{
							"match":"(TODO:|FIXME:)",
							"name":"keyword.nxc"
						}
					]
				},
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name":"comment.block.nxc",
					"patterns": [
						{
							"match":"(TODO:|FIXME:)",
							"name":"keyword.nxc"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.nxc",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.nxc",
					"begin": "'",
					"end": "'"
				},
				{
					"name": "constant.character.escape.nxc",
					"match": "\\\\."
				}
			]
		},
		"operators":{
			"patterns": [
				
				{
					"match": "--",
					"name": "keyword.operator.decrement.nxc"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.nxc"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=|\\|\\|=",
					"name": "keyword.operator.assignment.compound.nxc"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.nxc"
				},
				{
					"match": "<<=|>>=",
					"name": "keyword.operator.bitwise.shift.nxc"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.nxc"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.nxc"
				},
				{
					"match": "&\\s|\\||\\^|~",
					"name": "keyword.operator.logical.bitwise.nxc"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.nxc"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.nxc"
				},
				{
					"begin": "(\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.nxc"
						}
					},
					"end": "(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.nxc"
						}
					}
				}
			]
				
		},
		"keywords": {
			"patterns": [
				{    
					"name": "keyword.control.nxc",
					"match": "\\b(if|else|goto|repeat|switch|case|default|do|while|until|for|break|continue|catch|return|start|stop|priority)\\b"
				},
				{
					"name": "storage.modifier.nxc",
					"match": "\\b(const|inline|safecall|static|typedef)\\b"
				},
				{
					"name": "storage.type.nxc",
					"match": "\\b(void|bool|byte|char|int|int\\*|int&|short|long|unsigned|float|mutex|string|enum|struct|sub)\\b"
				},
				{
					"name": "constant.language.nxc",
					"match": "\\b(NULL|true|false|TRUE|FALSE)\\b"
				},
				{
					"name": "support.type.nxc",
					"match": "\\b(task|asm)\\b"
				},
				{
					"name": "keyword.control.resources.nxc",
					"match": "\\b(acquire|monitor)\\b"
				},
				{
					"name": "keyword.nxc",
					"match": "\\b(__event_src|__nolist|__res|__sensor|__taskid|__type)\\b"
				},
				{
					"match": "\\babs\\b",
					"name": "keyword.operator.abs.nxc"
				},
				{
					"match": "\\bsign\\b",
					"name": "keyword.operator.sign.nxc"
				}

			]
		},
		"capital_constants":{
			"patterns":[
				{
					"match": "\\b([A-Z_][0-9A-Z_]+)\\b",
					"name": "constant.character.nxc"
				}
			]
		},
		"functions":{
			"patterns":[
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()\\b",
					"name": "entity.name.function.nxc"
				}
			]
		},
		"constants":{
			"patterns": [
				{
					"match": "\\b[0-9\\.]+\\b",
					"name": "constant.numeric.nxc"
				},
				{
					"match": "\\b0x?([a-f0-9]{1,6}?)$\\b",
					"name": "constant.numeric.nxc"
				}
			]
		}
	},
	"scopeName": "source.nxc"
}