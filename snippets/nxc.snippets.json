{
    "block-comment":{
        "prefix":"/*",
        "body":["$BLOCK_COMMENT_START","\t$0","$BLOCK_COMMENT_END"],
        "description":"Block comment"
    },
    "main":{
        "prefix":["main()"],
        "body":["task main() {", "\t$0", "}"],
        "description": ["task main() {", "\tbody", "]"]
    },
    "for":{
        "prefix":["for()"],
        "body":["for(int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {", "\t$0", "}"],
        "description": ["for(statement1; bool condition; statement2) {", "\tbody", "}"]
    },
    "while":{
        "prefix":"while()",
        "body":["while($1)$0"],
        "description": ["while(bool condition) {", "\tbody", "}"]
    },
    "repeat":{
        "prefix":["repeat()"],
        "body":["repeat($1) {", "\t$0", "}"],
        "description":["repeat(int) {", "\tbody", "}"]
    },
    "do":{
        "prefix":"do",
        "body":["do {", "\t$1", "}$0"],
        "description": ["do {", "\tbody", "} while(bool condition)"]
    },
    "if":{
        "prefix":["if()"],
        "body":["if($1)$0"],
        "description": ["if(bool condition) {", "\tbody", "}"]
    },
    "else":{
        "prefix":["else"],
        "body":"else",
        "description":["else {", "\tbody", "}"]
    },
    "if-else":{
        "prefix":"if-else",
        "body":["if($1) {", "\t$2", "} else {", "\t$0", "}"],
        "description":["if(bool condition) {", "\tbody", "} else {", "\tbody", "}"]
    },
    "switch":{
        "prefix":"switch()",
        "body":["switch($1) {", "\t$0", "}"],
        "description":["switch(expression) {", "\tbody", "}"]
    },
    "case":{
        "prefix":"case",
        "body":["case:", "\t$0"],
        "description":["case:", "\t//do something", "\tbreak;"]
    },
    "default":{
        "prefix":"default",
        "body":["default:", "\t$0"],
        "description":["default:", "\t//do something", "\tbreak;"]
    },
    "break":{
        "prefix":"break",
        "body":"break",
        "description":"break;"
    },
    "continue":{
        "prefix":"continue",
        "body":"continue",
        "description":"continue;"
    },
    "goto":{
        "prefix":"goto",
        "body":"goto $0",
        "description":"goto [label]"
    },
    "until":{
        "prefix":"until()",
        "body":"until($1)$0",
        "description":"until(bool condition)"
    },
    "asm":{
        "prefix":"asm",
        "body":["asm {", "\t$0", "}"],
        "description":["asm {", "\tbody //NBC assembly language", "}"]
    },
    "start":{
        "prefix":"start",
        "body":"start",
        "description":"start [task_name];"
    },
    "stop":{
        "prefix":"stop",
        "body":"stop",
        "description":"stop [task_name]"
    },
    "priority":{
        "prefix":"priority",
        "body":"priority",
        "description":"priority [task_name]"
    },
    "return":{
        "prefix":"return",
        "body":"return",
        "description":"return [expression]"
    },
    "true":{
        "prefix":"true",
        "body":"true",
        "description":"Represents always true condition"
    },
    "false":{
        "prefix":"false",
        "body":"false",
        "description":"Represents always false condition"
    },
    "#include":{
        "prefix":"#include",
        "body":"#include \"$1\"$0",
        "description":"#include \"[filename]\""
    },
    "#define":{
        "prefix":"#define",
        "body":"#define",
        "description": "#define [symbol]"
    },
    "#import":{
        "prefix":"#import",
        "body":"#import \"$1\" $0",
        "description":"#import \"[filename]\" [symbol]"
    },
    "#download":{
        "prefix":"#download",
        "body":"#download \"$1\"$0",
        "description":"#download \"[filename]\""
    },
    "#ifdef":{
        "prefix":"#ifdef",
        "body":"#ifdef",
        "description":"#ifdef [symbol]"
    },
    "#ifndef":{
        "prefix":"#ifndef",
        "body":"#ifndef",
        "description":"#ifndef [symbol]"
    },
    "#else":{
        "prefix":"#else",
        "body":"#else",
        "description":["#else","//switch from compiling to not compiling & vice versa"]
    },
    "#endif":{
        "prefix":"#endif",
        "body":"#endif",
        "description":["#endif","//return to previous compiling state"]
    },
    "#if":{
        "prefix":"#if",
        "body":"#if",
        "description":["#if [condition]"]
    },
    "#elif":{
        "prefix":"#elif",
        "body":"#elif",
        "description":["#elif [condition]"]
    },
    "void":{
        "prefix":"void",
        "body":"void",
        "description":"void [name]"
    },
    "sub":{
        "prefix":"sub",
        "body":"sub",
        "description":"sub [name]"
    },
    "bool":{
        "prefix":"bool",
        "body":"bool",
        "description":"bool [name]"
    },
    "byte":{
        "prefix":"byte",
        "body":"byte",
        "description":"byte [name]"
    },
    "char":{
        "prefix":"char",
        "body":"char",
        "description":"char [name]"
    },
    "int":{
        "prefix":"int",
        "body":"int",
        "description":"int [name]"
    },
    "short":{
        "prefix":"short",
        "body":"short",
        "description":"short [name]"
    },
    "long":{
        "prefix":"long",
        "body":"long",
        "description":"long [name]"
    },
    "float":{
        "prefix":"float",
        "body":"float",
        "description":"float [name]"
    },
    "mutex":{
        "prefix":"mutex",
        "body":"mutex",
        "description":["mutex [name]","/*","\t32-bit value","\tused to synchronize access to resources shared across multiple threads","*/"]
    },
    "string":{
        "prefix":"string",
        "body":"string",
        "description":"string [name]"
    },
    "enum":{
        "prefix":"enum",
        "body":"enum",
        "description":"enum [name]"
    },
    "typedef":{
        "prefix":"typedef",
        "body":"typedef",
        "description":"typedef [type] [name]"
    },
    "struct":{
        "prefix":"struct",
        "body":"struct",
        "description":"struct [name]"
    },
    "unsigned":{
        "prefix":"unsigned",
        "body":"unsigned",
        "description":"unsigned [declaration]"
    },
    "static":{
        "prefix":"static",
        "body":"static",
        "description":"static [declaration]"
    },
    "inline":{
        "prefix":"inline",
        "body":"inline",
        "description":"inline [declaration]"
    },
    "safecall":{
        "prefix":"safecall",
        "body":"safecall",
        "description":"safecall [declaration]"
    },
    "const":{
        "prefix":"const",
        "body":"const",
        "description":"const [declaration]"
    },
    "task":{
        "prefix":"task",
        "body":["task $1($2) {", "\t$0", "}"],
        "description":["task [name]() {", "\tbody", "}"]
    },
    "SetSensorType":{
        "prefix":"SetSensorType()",
        "body":"SetSensorType(&1)&0",
        "description":"oid SetSensorType (const byte &port, byte type)"
    },
    "SetSensorMode":{
    "prefix": "SetSensorMode()",
    "body": "SetSensorMode($1)$0",
    "description": "void SetSensorMode (const byte &port, byte mode)"
    },
    "ClearSensor":{
        "prefix": "ClearSensor()",
        "body": "ClearSensor($1)$0",
        "description": "void ClearSensor (const byte &port)"
    },
    "ResetSensor":{
        "prefix": "ResetSensor()",
        "body": "ResetSensor($1)$0",
        "description": "void ResetSensor (const byte &port)"
    },
    "SetSensor":{
        "prefix": "SetSensor()",
        "body": "SetSensor($1)$0",
        "description": "void SetSensor (const byte &port, const unsigned int config)"
    },
    "SetSensorTouch":{
        "prefix": "SetSensorTouch()",
        "body": "SetSensorTouch($1)$0",
        "description": "void SetSensorTouch (const byte &port)"
    },
    "SetSensorLight":{
        "prefix": "SetSensorLight()",
        "body": "SetSensorLight($1)$0",
        "description": "void SetSensorLight (const byte &port, bool bActive=true)"
    },
    "SetSensorSound":{
        "prefix": "SetSensorSound()",
        "body": "SetSensorSound($1)$0",
        "description": "void SetSensorSound (const byte &port, bool bdBScaling=true)"
    },
    "SetSensorLowspeed":{
        "prefix": "SetSensorLowspeed()",
        "body": "SetSensorLowspeed($1)$0",
        "description": "void SetSensorLowspeed (const byte &port, bool bIsPowered=true)"
    },
    "SetSensorUltrasonic":{
        "prefix": "SetSensorUltrasonic()",
        "body": "SetSensorUltrasonic($1)$0",
        "description": "void SetSensorUltrasonic (const byte &port)"
    },
    "SetSensorEMeter":{
        "prefix": "SetSensorEMeter()",
        "body": "SetSensorEMeter($1)$0",
        "description": "void SetSensorEMeter (const byte &port)"
    },
    "SetSensorTemperature":{
        "prefix": "SetSensorTemperature()",
        "body": "SetSensorTemperature($1)$0",
        "description": "void SetSensorTemperature (const byte &port)"
    },
    "SetSensorColorFull":{
        "prefix": "SetSensorColorFull()",
        "body": "SetSensorColorFull($1)$0",
        "description": "void SetSensorColorFull (const byte &port)"
    },
    "SetSensorColorRed":{
        "prefix": "SetSensorColorRed()",
        "body": "SetSensorColorRed($1)$0",
        "description": "void SetSensorColorRed (const byte &port)"
    },
    "SetSensorColorGreen":{
        "prefix": "SetSensorColorGreen()",
        "body": "SetSensorColorGreen($1)$0",
        "description": "void SetSensorColorGreen (const byte &port)"
    },
    "SetSensorColorBlue":{
        "prefix": "SetSensorColorBlue()",
        "body": "SetSensorColorBlue($1)$0",
        "description": "void SetSensorColorBlue (const byte &port)"
    },
    "SetSensorColorNone":{
        "prefix": "SetSensorColorNone()",
        "body": "SetSensorColorNone($1)$0",
        "description": "void SetSensorColorNone (const byte &port)"
    },
    "GetInput":{
        "prefix": "GetInput()",
        "body": "GetInput($1)$0",
        "description": "variant GetInput (const byte &port, const byte field)"
    },
    "SetInput":{
        "prefix": "SetInput()",
        "body": "SetInput($1)$0",
        "description": "void SetInput (const byte &port, const int field, variant value)"
    },
    "Sensor":{
        "prefix": "Sensor()",
        "body": "Sensor($1)$0",
        "description": "unsigned int Sensor (const byte &port)"
    },
    "SensorBoolean":{
        "prefix": "SensorBoolean()",
        "body": "SensorBoolean($1)$0",
        "description": "bool SensorBoolean (const byte port)"
    },
    "SensorDigiPinsDirection":{
        "prefix": "SensorDigiPinsDirection()",
        "body": "SensorDigiPinsDirection($1)$0",
        "description": "byte SensorDigiPinsDirection (const byte port)"
    },
    "SensorDigiPinsOutputLevel":{
        "prefix": "SensorDigiPinsOutputLevel()",
        "body": "SensorDigiPinsOutputLevel($1)$0",
        "description": "byte SensorDigiPinsOutputLevel (const byte port)"
    },
    "SensorDigiPinsStatus":{
        "prefix": "SensorDigiPinsStatus()",
        "body": "SensorDigiPinsStatus($1)$0",
        "description": "byte SensorDigiPinsStatus (const byte port)"
    },
    "SensorInvalid":{
        "prefix": "SensorInvalid()",
        "body": "SensorInvalid($1)$0",
        "description": "bool SensorInvalid (const byte &port)"
    },
    "SensorMode":{
        "prefix": "SensorMode()",
        "body": "SensorMode($1)$0",
        "description": "byte SensorMode (const byte &port)"
    },
    "SensorNormalized":{
        "prefix": "SensorNormalized()",
        "body": "SensorNormalized($1)$0",
        "description": "unsigned int SensorNormalized (const byte &port)"
    },
    "SensorRaw":{
        "prefix": "SensorRaw()",
        "body": "SensorRaw($1)$0",
        "description": "unsigned int SensorRaw (const byte &port)"
    },
    "SensorScaled":{
        "prefix": "SensorScaled()",
        "body": "SensorScaled($1)$0",
        "description": "unsigned int SensorScaled (const byte &port)"
    },
    "SensorType":{
        "prefix": "SensorType()",
        "body": "SensorType($1)$0",
        "description": "byte SensorType (const byte &port)"
    },
    "SensorValue":{
        "prefix": "SensorValue()",
        "body": "SensorValue($1)$0",
        "description": "unsigned int SensorValue (const byte &port)"
    },
    "SensorValueBool":{
        "prefix": "SensorValueBool()",
        "body": "SensorValueBool($1)$0",
        "description": "bool SensorValueBool (const byte port)"
    },
    "SensorValueRaw":{
        "prefix": "SensorValueRaw()",
        "body": "SensorValueRaw($1)$0",
        "description": "unsigned int SensorValueRaw (const byte &port)"
    },
    "CustomSensorActiveStatus":{
        "prefix": "CustomSensorActiveStatus()",
        "body": "CustomSensorActiveStatus($1)$0",
        "description": "byte CustomSensorActiveStatus (byte port)"
    },
    "CustomSensorPercentFullScale":{
        "prefix": "CustomSensorPercentFullScale()",
        "body": "CustomSensorPercentFullScale($1)$0",
        "description": "byte CustomSensorPercentFullScale (byte port)"
    },
    "CustomSensorZeroOffset":{
        "prefix": "CustomSensorZeroOffset()",
        "body": "CustomSensorZeroOffset($1)$0",
        "description": "unsigned int CustomSensorZeroOffset (byte port)"
    },
    "SetCustomSensorActiveStatus":{
        "prefix": "SetCustomSensorActiveStatus()",
        "body": "SetCustomSensorActiveStatus($1)$0",
        "description": "void SetCustomSensorActiveStatus (byte port, byte activeStatus)"
    },
    "SetCustomSensorPercentFullScale":{
        "prefix": "SetCustomSensorPercentFullScale()",
        "body": "SetCustomSensorPercentFullScale($1)$0",
        "description": "void SetCustomSensorPercentFullScale (byte port, byte pctFullScale)"
    },
    "SetCustomSensorZeroOffset":{
        "prefix": "SetCustomSensorZeroOffset()",
        "body": "SetCustomSensorZeroOffset($1)$0",
        "description": "void SetCustomSensorZeroOffset (byte port, int zeroOffset)"
    },
    "SetSensorBoolean":{
        "prefix": "SetSensorBoolean()",
        "body": "SetSensorBoolean($1)$0",
        "description": "void SetSensorBoolean (byte port, bool value)"
    },
    "SetSensorDigiPinsDirection":{
        "prefix": "SetSensorDigiPinsDirection()",
        "body": "SetSensorDigiPinsDirection($1)$0",
        "description": "void SetSensorDigiPinsDirection (byte port, byte direction)"
    },
    "SetSensorDigiPinsOutputLevel":{
        "prefix": "SetSensorDigiPinsOutputLevel()",
        "body": "SetSensorDigiPinsOutputLevel($1)$0",
        "description": "void SetSensorDigiPinsOutputLevel (byte port, byte outputLevel)"
    },
    "SetSensorDigiPinsStatus":{
        "prefix": "SetSensorDigiPinsStatus()",
        "body": "SetSensorDigiPinsStatus($1)$0",
        "description": "void SetSensorDigiPinsStatus (byte port, byte status)"
    },
    "SysColorSensorRead":{
        "prefix": "SysColorSensorRead()",
        "body": "SysColorSensorRead($1)$0",
        "description": "void SysColorSensorRead (ColorSensorReadType &args)"
    },
    "ReadSensorColorEx":{
        "prefix": "ReadSensorColorEx()",
        "body": "ReadSensorColorEx($1)$0",
        "description": "int ReadSensorColorEx (const byte &port, int &colorval, unsigned int &raw[ ], unsigned int &norm[ ], int &scaled[ ])"
    },
    "ReadSensorColorRaw":{
        "prefix": "ReadSensorColorRaw()",
        "body": "ReadSensorColorRaw($1)$0",
        "description": "int ReadSensorColorRaw (const byte &port, unsigned int &rawVals[ ])"
    },
    "ColorADRaw":{
        "prefix": "ColorADRaw()",
        "body": "ColorADRaw($1)$0",
        "description": "unsigned int ColorADRaw (byte port, byte color)"
    },
    "ColorBoolean":{
        "prefix": "ColorBoolean()",
        "body": "ColorBoolean($1)$0",
        "description": "bool ColorBoolean (byte port, byte color)"
    },
    "ColorCalibration":{
        "prefix": "ColorCalibration()",
        "body": "ColorCalibration($1)$0",
        "description": "long ColorCalibration (byte port, byte point, byte color)"
    },
    "ColorCalibrationState":{
        "prefix": "ColorCalibrationState()",
        "body": "ColorCalibrationState($1)$0",
        "description": "byte ColorCalibrationState (byte port)"
    },
    "ColorCallLimits":{
        "prefix": "ColorCallLimits()",
        "body": "ColorCallLimits($1)$0",
        "description": "unsigned int ColorCalLimits (byte port, byte point)"
    },
    "ColorSensorRaw":{
        "prefix": "ColorSensorRaw()",
        "body": "ColorSensorRaw($1)$0",
        "description": "unsigned int ColorSensorRaw (byte port, byte color)"
    },
    "ColorSensorValue":{
        "prefix": "ColorSensorValue()",
        "body": "ColorSensorValue($1)$0",
        "description": "unsigned int ColorSensorValue (byte port, byte color)"
    },
    "SysInputPinFunction":{
        "prefix": "SysInputPinFunction()",
        "body": "SysInputPinFunction($1)$0",
        "description": "void SysInputPinFunction (InputPinFunctionType &args)"
    },
    "SetMotorPwnFreq":{
        "prefix": "SetMotorPwnFreq()",
        "body": "SetMotorPwnFreq($1)$0",
        "description": "void SetMotorPwnFreq (byte n)"
    },
    "SetMotorRegulationTime":{
        "prefix": "SetMotorRegulationTime()",
        "body": "SetMotorRegulationTime($1)$0",
        "description": "void SetMotorRegulationTime (byte n)"
    },
    "SetMotorRegulationOptions":{
        "prefix": "SetMotorRegulationOptions()",
        "body": "SetMotorRegulationOptions($1)$0",
        "description": "void SetMotorRegulationOptions (byte n)"
    },
    "OnFwdSyncPID":{
        "prefix": "OnFwdSyncPID()",
        "body": "OnFwdSyncPID($1)$0",
        "description": "void OnFwdSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)"
    },
    "OnFwdSyncExPID":{
        "prefix": "OnFwdSyncExPID()",
        "body": "OnFwdSyncExPID($1)$0",
        "description": "void OnFwdSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)"
    },
    "OnRevSyncPID":{
        "prefix": "OnRevSyncPID()",
        "body": "OnRevSyncPID($1)$0",
        "description": "void OnRevSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)"
    },
    "OnRevSyncExPID":{
        "prefix": "OnRevSyncExPID()",
        "body": "OnRevSyncExPID($1)$0",
        "description": "void OnRevSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)"
    },
    "OnFwdRegPID":{
        "prefix": "OnFwdRegPID()",
        "body": "OnFwdRegPID($1)$0",
        "description": "void OnFwdRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnFwdRegExPID":{
        "prefix": "OnFwdRegExPID()",
        "body": "OnFwdRegExPID($1)$0",
        "description": "void OnFwdRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnRevRegPID":{
        "prefix": "OnRevRegPID()",
        "body": "OnRevRegPID($1)$0",
        "description": "void OnRevRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnRevRegExPID":{
        "prefix": "OnRevRegExPID()",
        "body": "OnRevRegExPID($1)$0",
        "description": "void OnRevRegExPID (byte outputs, char pwr, byte regmode, const byte reset, byte p, byte i, byte d)"
    },
    "Off":{
        "prefix": "Off()",
        "body": "Off($1)$0",
        "description": "void Off (byte outputs)"
    },
    "OffEx":{
        "prefix": "OffEx()",
        "body": "OffEx($1)$0",
        "description": "void OffEx (byte outputs, const byte reset)"
    },
    "Coast":{
        "prefix": "Coast()",
        "body": "Coast($1)$0",
        "description": "void Coast (byte outputs)"
    },
    "CoastEx":{
        "prefix": "CoastEx()",
        "body": "CoastEx($1)$0",
        "description": "void CoastEx (byte outputs, const byte reset)"
    },
    "Float":{
        "prefix": "Float()",
        "body": "Float($1)$0",
        "description": "void Float (byte outputs)"
    },
    "OnFwd":{
        "prefix": "OnFwd()",
        "body": "OnFwd($1)$0",
        "description": "void OnFwd (byte outputs, char pwr)"
    },
    "OnFwdEx":{
        "prefix": "OnFwdEx()",
        "body": "OnFwdEx($1)$0",
        "description": "void OnFwdEx (byte outputs, char pwr, const byte reset)"
    },
    "OnRev":{
        "prefix": "OnRev()",
        "body": "OnRev($1)$0",
        "description": "void OnRev (byte outputs, char pwr)"
    },
    "OnRevEx":{
        "prefix": "OnRevEx()",
        "body": "OnRevEx($1)$0",
        "description": "void OnRevEx (byte outputs, char pwr, const byte reset)"
    },
    "OnFwdReg":{
        "prefix": "OnFwdReg()",
        "body": "OnFwdReg($1)$0",
        "description": "void OnFwdReg (byte outputs, char pwr, byte regmode)"
    },
    "OnFwdRegEx":{
        "prefix": "OnFwdRegEx()",
        "body": "OnFwdRegEx($1)$0",
        "description": "void OnFwdRegEx (byte outputs, char pwr, byte regmode, const byte reset)"
    },
    "OnRevReg":{
        "prefix": "OnRevReg()",
        "body": "OnRevReg($1)$0",
        "description": "void OnRevReg (byte outputs, char pwr, byte regmode)"
    },
    "OnRevRegEx":{
        "prefix": "OnRevRegEx()",
        "body": "OnRevRegEx($1)$0",
        "description": "void OnRevRegEx (byte outputs, char pwr, byte regmode, const byte reset)"
    },
    "OnFwdSync":{
        "prefix": "OnFwdSync()",
        "body": "OnFwdSync($1)$0",
        "description": "void OnFwdSync (byte outputs, char pwr, char turnpct)"
    },
    "OnFwdSyncEx":{
        "prefix": "OnFwdSyncEx()",
        "body": "OnFwdSyncEx($1)$0",
        "description": "void OnFwdSyncEx (byte outputs, char pwr, char turnpct, const byte reset)"
    },
    "OnRevSync":{
        "prefix": "OnRevSync()",
        "body": "OnRevSync($1)$0",
        "description": "void OnRevSync (byte outputs, char pwr, char turnpct)"
    },
    "OnRevSyncEx":{
        "prefix": "OnRevSyncEx()",
        "body": "OnRevSyncEx($1)$0",
        "description": "void OnRevSyncEx (byte outputs, char pwr, char turnpct, const byte reset)"
    },
    "RotateMotor":{
        "prefix": "RotateMotor()",
        "body": "RotateMotor($1)$0",
        "description": "void RotateMotor (byte outputs, char pwr, long angle)"
    },
    "RotateMotorPID":{
        "prefix": "RotateMotorPID()",
        "body": "RotateMotorPID($1)$0",
        "description": "void RotateMotorPID (byte outputs, char pwr, long angle, byte p, byte i, byte d)"
    },
    "RotateMotorEx":{
        "prefix": "RotateMotorEx()",
        "body": "RotateMotorEx($1)$0",
        "description": "void RotateMotorEx (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop)"
    },
    "RotateMotorExPID":{
        "prefix": "RotateMotorExPID()",
        "body": "RotateMotorExPID($1)$0",
        "description": "void RotateMotorExPID (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop, byte p, byte i, byte d)"
    },
    "ResetTachoCount":{
        "prefix": "ResetTachoCount()",
        "body": "ResetTachoCount($1)$0",
        "description": "void ResetTachoCount (byte outputs)"
    },
    "ResetBlockTachoCount":{
        "prefix": "ResetBlockTachoCount()",
        "body": "ResetBlockTachoCount($1)$0",
        "description": "void ResetBlockTachoCount (byte outputs)"
    },
    "ResetRotationCount":{
        "prefix": "ResetRotationCount()",
        "body": "ResetRotationCount($1)$0",
        "description": "void ResetRotationCount (byte outputs)"
    },
    "ResetAllTachoCount":{
        "prefix": "ResetAllTachoCount()",
        "body": "ResetAllTachoCount($1)$0",
        "description": "void ResetAllTachoCounts (byte outputs)"
    },
    "SetOutput":{
        "prefix": "SetOutput()",
        "body": "SetOutput($1)$0",
        "description": "void SetOutput (byte outputs, byte field1, variant val1,..., byte fieldN, variant valN)"
    },
    "GetOutput":{
        "prefix": "GetOutput()",
        "body": "GetOutput($1)$0",
        "description": "variant GetOutput (byte output, const byte field)"
    },
    "MotorMode":{
        "prefix": "MotorMode()",
        "body": "MotorMode($1)$0",
        "description": "byte MotorMode (byte output)"
    },
    "MotorPower":{
        "prefix": "MotorPower()",
        "body": "MotorPower($1)$0",
        "description": "char MotorPower (byte output)"
    },
    "MotorActualSpeed":{
        "prefix": "MotorActualSpeed()",
        "body": "MotorActualSpeed($1)$0",
        "description": "char MotorActualSpeed (byte output)"
    },
    "MotorTachoCount":{
        "prefix": "MotorTachoCount()",
        "body": "MotorTachoCount($1)$0",
        "description": "long MotorTachoCount (byte output)"
    },
    "MotorTachoLimit":{
        "prefix": "MotorTachoLimit()",
        "body": "MotorTachoLimit($1)$0",
        "description": "long MotorTachoLimit (byte output)"
    },
    "MotorRunState":{
        "prefix": "MotorRunState()",
        "body": "MotorRunState($1)$0",
        "description": "byte MotorRunState (byte output)"
    },
    "MotorTurnRatio":{
        "prefix": "MotorTurnRatio()",
        "body": "MotorTurnRatio($1)$0",
        "description": "char MotorTurnRatio (byte output)"
    },
    "MotorRegulation":{
        "prefix": "MotorRegulation()",
        "body": "MotorRegulation($1)$0",
        "description": "byte MotorRegulation (byte output)"
    },
    "MotorOverload":{
        "prefix": "MotorOverload()",
        "body": "MotorOverload($1)$0",
        "description": "bool MotorOverload (byte output)"
    },
    "MotorRegPValue":{
        "prefix": "MotorRegPValue()",
        "body": "MotorRegPValue($1)$0",
        "description": "byte MotorRegPValue (byte output)"
    },
    "MotorRegIValue":{
        "prefix": "MotorRegIValue()",
        "body": "MotorRegIValue($1)$0",
        "description": "byte MotorRegIValue (byte output)"
    },
    "MotorRegDValue":{
        "prefix": "MotorRegDValue()",
        "body": "MotorRegDValue($1)$0",
        "description": "byte MotorRegDValue (byte output)"
    },
    "MotorBlockTachoCount":{
        "prefix": "MotorBlockTachoCount()",
        "body": "MotorBlockTachoCount($1)$0",
        "description": "long MotorBlockTachoCount (byte output)"
    },
    "MotorRotationCount":{
        "prefix": "MotorRotationCount()",
        "body": "MotorRotationCount($1)$0",
        "description": "long MotorRotationCount (byte output)"
    },
    "MotorOutputOptions":{
        "prefix": "MotorOutputOptions()",
        "body": "MotorOutputOptions($1)$0",
        "description": "byte MotorOutputOptions (byte output)"
    },
    "MotorMaxSpeed":{
        "prefix": "MotorMaxSpeed()",
        "body": "MotorMaxSpeed($1)$0",
        "description": "byte MotorMaxSpeed (byte output)"
    },
    "MotorMaxAcceleration":{
        "prefix": "MotorMaxAcceleration()",
        "body": "MotorMaxAcceleration($1)$0",
        "description": "byte MotorMaxAcceleration (byte output)"
    },
    "MotorPwnFreq":{
        "prefix": "MotorPwnFreq()",
        "body": "MotorPwnFreq($1)$0",
        "description": "byte MotorPwnFreq ()"
    },
    "MotorRegulationTime":{
        "prefix": "MotorRegulationTime()",
        "body": "MotorRegulationTime($1)$0",
        "description": "byte MotorRegulationTime ()"
    },
    "MotorRegulationOptions":{
        "prefix": "MotorRegulationOptions()",
        "body": "MotorRegulationOptions($1)$0",
        "description": "byte MotorRegulationOptions ()"
    },
    "PosRegEnable":{
        "prefix": "PosRegEnable()",
        "body": "PosRegEnable($1)$0",
        "description": "void PosRegEnable (byte output, byte p=PID_3, byte i=PID_1, byte d=PID_1)"
    },
    "PosRegSetAngle":{
        "prefix": "PosRegSetAngle()",
        "body": "PosRegSetAngle($1)$0",
        "description": "void PosRegSetAngle (byte output, long angle)"
    },
    "PosRegAddAngle":{
        "prefix": "PosRegAddAngle()",
        "body": "PosRegAddAngle($1)$0",
        "description": "void PosRegAddAngle (byte output, long angle_add)"
    },
    "PosRegSetMax":{
        "prefix": "PosRegSetMax()",
        "body": "PosRegSetMax($1)$0",
        "description": "void PosRegSetMax (byte output, byte max_speed, byte max_acceleration)"
    },
    "ResetScreen":{
        "prefix": "ResetScreen()",
        "body": "ResetScreen",
        "description": "void ResetScreen ()"
    },
    "CircleOut":{
        "prefix": "CircleOut()",
        "body": "CircleOut($1)$0",
        "description": "char CircleOut (int x, int y, byte radius, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "LineOut":{
        "prefix": "LineOut()",
        "body": "LineOut($1)$0",
        "description": "char LineOut (int x1, int y1, int x2, int y2, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "PointOut":{
        "prefix": "PointOut()",
        "body": "PointOut($1)$0",
        "description": "char PointOut (int x, int y, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "RectOut":{
        "prefix": "RectOut()",
        "body": "RectOut($1)$0",
        "description": " char RectOut (int x, int y, int width, int height, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "TextOut":{
        "prefix": "TextOut()",
        "body": "TextOut($1)$0",
        "description": " char TextOut (int x, int y, string str, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "NumOut":{
        "prefix": "NumOut()",
        "body": "NumOut($1)$0",
        "description": "char NumOut (int x, int y, variant value, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "EllipseOut":{
        "prefix": "EllipseOut()",
        "body": "EllipseOut($1)$0",
        "description": "char EllipseOut (int x, int y, byte radiusX, byte radiusY, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "PolyOut":{
        "prefix": "PolyOut()",
        "body": "PolyOut($1)$0",
        "description": "char PolyOut (LocationType points[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "FontTextOut":{
        "prefix": "FontTextOut()",
        "body": "FontTextOut($1)$0",
        "description": "char FontTextOut (int x, int y, string filename, string str, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "FontNumOut":{
        "prefix": "FontNumOut()",
        "body": "FontNumOut($1)$0",
        "description": "char FontNumOut (int x, int y, string filename, variant value, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicOut":{
        "prefix": "GraphicOut()",
        "body": "GraphicOut($1)$0",
        "description": "char GraphicOut (int x, int y, string filename, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicArrayOut":{
        "prefix": "GraphicArrayOut()",
        "body": "GraphicArrayOut($1)$0",
        "description": "char GraphicArrayOut (int x, int y, byte data[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicOutEx":{
        "prefix": "GraphicOutEx()",
        "body": "GraphicOutEx($1)$0",
        "description": "char GraphicOutEx (int x, int y, string filename, byte vars[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicArrayOutEx":{
        "prefix": "GraphicArrayOutEx()",
        "body": "GraphicArrayOutEx($1)$0",
        "description": "char GraphicArrayOutEx (int x, int y, byte data[ ], byte vars[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GetDisplayNormal":{
        "prefix": "GetDisplayNormal()",
        "body": "GetDisplayNormal($1)$0",
        "description": "void GetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte &data[ ])"
    },
    "SetDisplayNormal":{
        "prefix": "SetDisplayNormal()",
        "body": "SetDisplayNormal($1)$0",
        "description": "void SetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte data[ ])"
    },
    "GetDisplayPopup":{
        "prefix": "GetDisplayPopup()",
        "body": "GetDisplayPopup($1)$0",
        "description": "void GetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte &data[ ])"
    },
    "SetDisplayPopup":{
        "prefix": "SetDisplayPopup()",
        "body": "SetDisplayPopup($1)$0",
        "description": "void SetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte data[ ])"
    },
    "DisplayEraseMask":{
        "prefix": "DisplayEraseMask()",
        "body": "DisplayEraseMask($1)$0",
        "description": "unsigned long DisplayEraseMask ()"
    },
    "DisplayUpdateMask":{
        "prefix": "DisplayUpdateMask()",
        "body": "DisplayUpdateMask($1)$0",
        "description": "unsigned long DisplayUpdateMask ()"
    },
    "DisplayFont":{
        "prefix": "DisplayFont()",
        "body": "DisplayFont($1)$0",
        "description": "unsigned long DisplayFont ()"
    },
    "DisplayDisplay":{
        "prefix": "DisplayDisplay()",
        "body": "DisplayDisplay($1)$0",
        "description": "unsigned long DisplayDisplay ()"
    },
    "DisplayFlags":{
        "prefix": "DisplayFlags()",
        "body": "DisplayFlags($1)$0",
        "description": "byte DisplayFlags ()"
    },
    "DisplayTextLinesCenterFlags":{
        "prefix": "DisplayTextLinesCenterFlags()",
        "body": "DisplayTextLinesCenterFlags($1)$0",
        "description": "byte DisplayTextLinesCenterFlags ()"
    },
    "SysDrawText":{
        "prefix": "SysDrawText()",
        "body": "SysDrawText($1)$0",
        "description": "void SysDrawText (DrawTextType &args)"
    },
    "SysDrawPoint":{
        "prefix": "SysDrawPoint()",
        "body": "SysDrawPoint($1)$0",
        "description": "void SysDrawPoint (DrawPointType &args)"
    },
    "SysDrawLine":{
        "prefix": "SysDrawLine()",
        "body": "SysDrawLine($1)$0",
        "description": "void SysDrawLine (DrawLineType &args)"
    },
    "SysDrawCircle":{
        "prefix": "SysDrawCircle()",
        "body": "SysDrawCircle($1)$0",
        "description": "void SysDrawCircle (DrawCircleType &args)"
    },
    "SysDrawRect":{
        "prefix": "SysDrawRect()",
        "body": "SysDrawRect($1)$0",
        "description": "void SysDrawRect (DrawRectType &args)"
    },
    "SysDrawGraphic":{
        "prefix": "SysDrawGraphic()",
        "body": "SysDrawGraphic($1)$0",
        "description": "void SysDrawGraphic (DrawGraphicType &args)"
    },
    "SysSetScreenMode":{
        "prefix": "SysSetScreenMode()",
        "body": "SysSetScreenMode($1)$0",
        "description": "void SysSetScreenMode (SetScreenModeType &args)"
    },
    "SysDisplayExecuteFunction":{
        "prefix": "SysDisplayExecuteFunction()",
        "body": "SysDisplayExecuteFunction($1)$0",
        "description": "void SysDisplayExecuteFunction (DisplayExecuteFunctionType &args)"
    },
    "DisplayContrast":{
        "prefix": "DisplayContrast()",
        "body": "DisplayContrast($1)$0",
        "description": "byte DisplayContrast ()"
    },
    "SysDrawGraphicArray":{
        "prefix": "SysDrawGraphicArray()",
        "body": "SysDrawGraphicArray($1)$0",
        "description": "void SysDrawGraphicArray (DrawGraphicArrayType &args)"
    },
    "SysDrawPolygon":{
        "prefix": "SysDrawPolygon()",
        "body": "SysDrawPolygon($1)$0",
        "description": "void SysDrawPolygon (DrawPolygonType &args)"
    },
    "SysDrawEllipse":{
        "prefix": "SysDrawEllipse()",
        "body": "SysDrawEllipse($1)$0",
        "description": "void SysDrawEllipse (DrawEllipseType &args)"
    },
    "SysDrawFont":{
        "prefix": "SysDrawFont()",
        "body": "SysDrawFont($1)$0",
        "description": "void SysDrawFont (DrawFontType &args)"
    },
    "ClearScreen":{
        "prefix": "ClearScreen()",
        "body": "ClearScreen($1)$0",
        "description": "void ClearScreen ()"
    },
    "ClearLine":{
        "prefix": "ClearLine()",
        "body": "ClearLine($1)$0",
        "description": "void ClearLine (byte line)"
    },
    "SetDisplayFont":{
        "prefix": "SetDisplayFont()",
        "body": "SetDisplayFont($1)$0",
        "description": "void SetDisplayFont (unsigned long fontaddr)"
    },
    "SetDisplayDisplay":{
        "prefix": "SetDisplayDisplay()",
        "body": "SetDisplayDisplay($1)$0",
        "description": "void SetDisplayDisplay (unsigned long dispaddr)"
    },
    "SetDisplayEraseMask":{
        "prefix": "SetDisplayEraseMask()",
        "body": "SetDisplayEraseMask($1)$0",
        "description": "void SetDisplayEraseMask (unsigned long eraseMask)"
    },
    "SetDisplayFlags":{
        "prefix": "SetDisplayFlags()",
        "body": "SetDisplayFlags($1)$0",
        "description": "void SetDisplayFlags (byte flags)"
    },
    "SetDisplayTextLinesCenterFlags":{
        "prefix": "SetDisplayTextLinesCenterFlags()",
        "body": "SetDisplayTextLinesCenterFlags($1)$0",
        "description": "void SetDisplayTextLinesCenterFlags (byte ctrFlags)"
    },
    "SetDisplayUpdateMask":{
        "prefix": "SetDisplayUpdateMask()",
        "body": "SetDisplayUpdateMask($1)$0",
        "description": "void SetDisplayUpdateMask (unsigned long updateMask)"
    },
    "SetDisplayContrast":{
        "prefix": "SetDisplayContrast()",
        "body": "SetDisplayContrast($1)$0",
        "description": "void SetDisplayContrast (byte contrast)"
    },
    "PlayFile":{
        "prefix": "PlayFile()",
        "body": "PlayFile($1)$0",
        "description": "char PlayFile (string filename)"
    },
    "PlayFileEx":{
        "prefix": "PlayFileEx()",
        "body": "PlayFileEx($1)$0",
        "description": "char PlayFileEx (string filename, byte volume, bool loop)"
    },
    "PlayTone":{
        "prefix": "PlayTone()",
        "body": "PlayTone($1)$0",
        "description": "char PlayTone (unsigned int frequency, unsigned int duration)"
    },
    "PlayToneEx":{
        "prefix": "PlayToneEx()",
        "body": "PlayToneEx($1)$0",
        "description": "char PlayToneEx (unsigned int frequency, unsigned int duration, byte volume, bool loop)"
    },
    "SoundState":{
        "prefix": "SoundState()",
        "body": "SoundState($1)$0",
        "description": "byte SoundState ()"
    },
    "SoundFlags":{
        "prefix": "SoundFlags()",
        "body": "SoundFlags($1)$0",
        "description": "byte SoundFlags ()"
    },
    "StopSound":{
        "prefix": "StopSound()",
        "body": "StopSound($1)$0",
        "description": "byte StopSound ()"
    },
    "SoundFrequency":{
        "prefix": "SoundFrequency()",
        "body": "SoundFrequency($1)$0",
        "description": "unsigned int SoundFrequency ()"
    },
    "SoundDuration":{
        "prefix": "SoundDuration()",
        "body": "SoundDuration($1)$0",
        "description": "unsigned int SoundDuration ()"
    },
    "SoundSampleRate":{
        "prefix": "SoundSampleRate()",
        "body": "SoundSampleRate($1)$0",
        "description": "unsigned int SoundSampleRate ()"
    },
    "SoundMode":{
        "prefix": "SoundMode()",
        "body": "SoundMode($1)$0",
        "description": "byte SoundMode ()"
    },
    "SoundVolume":{
        "prefix": "SoundVolume()",
        "body": "SoundVolume($1)$0",
        "description": "byte SoundVolume ()"
    },
    "SetSoundDuration":{
        "prefix": "SetSoundDuration()",
        "body": "SetSoundDuration($1)$0",
        "description": "void SetSoundDuration (unsigned int duration)"
    },
    "SetSoundFlags":{
        "prefix": "SetSoundFlags()",
        "body": "SetSoundFlags($1)$0",
        "description": "void SetSoundFlags (byte flags)"
    },
    "SetSoundFrequency":{
        "prefix": "SetSoundFrequency()",
        "body": "SetSoundFrequency($1)$0",
        "description": "void SetSoundFrequency (unsigned int frequency)"
    },
    "SetSoundMode":{
        "prefix": "SetSoundMode()",
        "body": "SetSoundMode($1)$0",
        "description": "void SetSoundMode (byte mode)"
    },
    "SetSoundModuleState":{
        "prefix": "SetSoundModuleState()",
        "body": "SetSoundModuleState($1)$0",
        "description": "void SetSoundModuleState (byte state)"
    },
    "SetSoundSampleRate":{
        "prefix": "SetSoundSampleRate()",
        "body": "SetSoundSampleRate($1)$0",
        "description": "void SetSoundSampleRate (unsigned int sampleRate)"
    },
    "SetSoundVolume":{
        "prefix": "SetSoundVolume()",
        "body": "SetSoundVolume($1)$0",
        "description": "void SetSoundVolume (byte volume)"
    },
    "SysSoundPlayFile":{
        "prefix": "SysSoundPlayFile()",
        "body": "SysSoundPlayFile($1)$0",
        "description": "void SysSoundPlayFile (SoundPlayFileType &args)"
    },
    "SysSoundPlayTone":{
        "prefix": "SysSoundPlayTone()",
        "body": "SysSoundPlayTone($1)$0",
        "description": "void SysSoundPlayTone (SoundPlayToneType &args)"
    },
    "SoundGetState":{
        "prefix": "SoundGetState()",
        "body": "SoundGetState($1)$0",
        "description": "void SysSoundGetState (SoundGetStateType &args)"
    },
    "SysSoundSetState":{
        "prefix": "SysSoundSetState()",
        "body": "SysSoundSetState($1)$0",
        "description": "void SysSoundSetState (SoundSetStateType &args)"
    },
    "PlaySound":{
        "prefix": "PlaySound()",
        "body": "PlaySound($1)$0",
        "description": "void PlaySound (const int &aCode)"
    },
    "PlayTones":{
        "prefix": "PlayTones()",
        "body": "PlayTones($1)$0",
        "description": "void PlayTones (Tone tones[])"
    },
    "SensorUS":{
        "prefix": "SensorUS()",
        "body": "SensorUS($1)$0",
        "description": "byte SensorUS (const byte port)"
    },
    "ReadSensorUSEx":{
        "prefix": "ReadSensorUSEx()",
        "body": "ReadSensorUSEx($1)$0",
        "description": "char ReadSensorUSEx (const byte port, byte &values[ ])"
    },
    "ReadSensorEMeter":{
        "prefix": "ReadSensorEMeter()",
        "body": "ReadSensorEMeter($1)$0",
        "description": "char ReadSensorEMeter (const byte &port, float &vIn, float &aIn, float &vOut,)"
    },
    "ConfigureTemperatureSensor":{
        "prefix": "ConfigureTemperatureSensor()",
        "body": "ConfigureTemperatureSensor($1)$0",
        "description": "char ConfigureTemperatureSensor (const byte &port, const byte &config)"
    },
    "SensorTemperature":{
        "prefix": "SensorTemperature()",
        "body": "SensorTemperature($1)$0",
        "description": "float SensorTemperature (const byte &port)"
    },
    "LowspeedStatus":{
        "prefix": "LowspeedStatus()",
        "body": "LowspeedStatus($1)$0",
        "description": "long LowspeedStatus (const byte port, byte &bytesready)"
    },
    "LowspeedCheckStatus":{
        "prefix": "LowspeedCheckStatus()",
        "body": "LowspeedCheckStatus($1)$0",
        "description": "long LowspeedCheckStatus (const byte port)"
    },
    "LowspeedBytesReady":{
        "prefix": "LowspeedBytesReady()",
        "body": "LowspeedBytesReady($1)$0",
        "description": "byte LowspeedBytesReady (const byte port)"
    },
    "LowspeedWrite":{
        "prefix": "LowspeedWrite()",
        "body": "LowspeedWrite($1)$0",
        "description": "long LowspeedWrite (const byte port, byte retlen, byte buffer[ ])"
    },
    "LowspeedRead":{
        "prefix": "LowspeedRead()",
        "body": "LowspeedRead($1)$0",
        "description": "long LowspeedRead (const byte port, byte buflen, byte &buffer[ ])"
    },
    "I2CStatus":{
        "prefix": "I2CStatus()",
        "body": "I2CStatus($1)$0",
        "description": "long I2CStatus (const byte port, byte &bytesready)"
    },
    "I2CCheckStatus":{
        "prefix": "I2CCheckStatus()",
        "body": "I2CCheckStatus($1)$0",
        "description": "long I2CCheckStatus (const byte port)"
    },
    "I2CBytesReady":{
        "prefix": "I2CBytesReady()",
        "body": "I2CBytesReady($1)$0",
        "description": "byte I2CBytesReady (const byte port)"
    },
    "I2CWrite":{
        "prefix": "I2CWrite()",
        "body": "I2CWrite($1)$0",
        "description": "long I2CWrite (const byte port, byte retlen, byte buffer[ ])"
    },
    "I2CRead":{
        "prefix": "I2CRead()",
        "body": "I2CRead($1)$0",
        "description": "long I2CRead (const byte port, byte buflen, byte &buffer[ ])"
    },
    "I2CBytes":{
        "prefix": "I2CBytes()",
        "body": "I2CBytes($1)$0",
        "description": "long I2CBytes (const byte port, byte inbuf[ ], byte &count, byte &outbuf[ ])"
    },
    "ReadI2CRegister":{
        "prefix": "ReadI2CRegister()",
        "body": "ReadI2CRegister($1)$0",
        "description": "char ReadI2CRegister (byte port, byte i2caddr, byte reg, byte &out)"
    },
    "WriteI2CRegister":{
        "prefix": "WriteI2CRegister()",
        "body": "WriteI2CRegister($1)$0",
        "description": "char WriteI2CRegister (byte port, byte i2caddr, byte reg, byte val)"
    },
    "I2CDeviceInfo":{
        "prefix": "I2CDeviceInfo()",
        "body": "I2CDeviceInfo($1)$0",
        "description": "string I2CDeviceInfo (byte port, byte i2caddr, byte info)"
    },
    "I2CVersion":{
        "prefix": "I2CVersion()",
        "body": "I2CVersion($1)$0",
        "description": "string I2CVersion (byte port, byte i2caddr)"
    },
    "I2CVendorId":{
        "prefix": "I2CVendorId()",
        "body": "I2CVendorId($1)$0",
        "description": "string I2CVendorId (byte port, byte i2caddr)"
    },
    "I2CDeviceId":{
        "prefix": "I2CDeviceId()",
        "body": "I2CDeviceId($1)$0",
        "description": "string I2CDeviceId (byte port, byte i2caddr)"
    },
    "I2CSendCommand":{
        "prefix": "I2CSendCommand()",
        "body": "I2CSendCommand($1)$0",
        "description": "long I2CSendCommand (byte port, byte i2caddr, byte cmd)"
    },
    "GetLSInputBuffer":{
        "prefix": "GetLSInputBuffer()",
        "body": "GetLSInputBuffer($1)$0",
        "description": "void GetLSInputBuffer (const byte port, const byte offset, byte cnt, byte &data[ ])"
    },
    "GetLSOutputBuffer":{
        "prefix": "GetLSOutputBuffer()",
        "body": "GetLSOutputBuffer($1)$0",
        "description": "void GetLSOutputBuffer (const byte port, const byte offset, byte cnt, byte &data[ ])"
    },
    "LSInputBufferInPtr":{
        "prefix": "LSInputBufferInPtr()",
        "body": "LSInputBufferInPtr($1)$0",
        "description": "byte LSInputBufferInPtr (const byte port)"
    },
    "LSInputBufferOutPtr":{
        "prefix": "LSInputBufferOutPtr()",
        "body": "LSInputBufferOutPtr($1)$0",
        "description": "byte LSInputBufferOutPtr (const byte port)"
    },
    "LSInputBufferBytesToRx":{
        "prefix": "LSInputBufferBytesToRx()",
        "body": "LSInputBufferBytesToRx($1)$0",
        "description": "byte LSInputBufferBytesToRx (const byte port)"
    },
    "LSOutputBufferInPtr":{
        "prefix": "LSOutputBufferInPtr()",
        "body": "LSOutputBufferInPtr($1)$0",
        "description": "byte LSOutputBufferInPtr (const byte port)"
    },
    "LSOutputBufferOutPtr":{
        "prefix": "LSOutputBufferOutPtr()",
        "body": "LSOutputBufferOutPtr($1)$0",
        "description": "byte LSOutputBufferOutPtr (const byte port)"
    },
    "LSOutputBufferBytesToRx":{
        "prefix": "LSOutputBufferBytesToRx()",
        "body": "LSOutputBufferBytesToRx($1)$0",
        "description": "byte LSOutputBufferBytesToRx (const byte port)"
    },
    "LSMode":{
        "prefix": "LSMode()",
        "body": "LSMode($1)$0",
        "description": "byte LSMode (const byte port)"
    },
    "LSChannelState":{
        "prefix": "LSChannelState()",
        "body": "LSChannelState($1)$0",
        "description": "byte LSChannelState (const byte port)"
    },
    "LSErrorType":{
        "prefix": "LSErrorType()",
        "body": "LSErrorType($1)$0",
        "description": "byte LSErrorType (const byte port)"
    },
    "LSState":{
        "prefix": "LSState()",
        "body": "LSState($1)$0",
        "description": "byte LSState ()"
    },
    "LSSpeed":{
        "prefix": "LSSpeed()",
        "body": "LSSpeed($1)$0",
        "description": "byte LSSpeed ()"
    },
    "LSNoRestartOnRead":{
        "prefix": "LSNoRestartOnRead()",
        "body": "LSNoRestartOnRead($1)$0",
        "description": "byte LSNoRestartOnRead ()"
    },
    "SetI2COptions":{
        "prefix": "SetI2COptions()",
        "body": "SetI2COptions($1)$0",
        "description": "void SetI2COptions (byte port, byte options)"
    },
    "SysCommLSWrite":{
        "prefix": "SysCommLSWrite()",
        "body": "SysCommLSWrite($1)$0",
        "description": "void SysCommLSWrite (CommLSWriteType &args)"
    },
    "SysCommLSRead":{
        "prefix": "SysCommLSRead()",
        "body": "SysCommLSRead($1)$0",
        "description": "void SysCommLSRead (CommLSReadType &args)"
    },
    "SysCommLSCheckStatus":{
        "prefix": "SysCommLSCheckStatus()",
        "body": "SysCommLSCheckStatus($1)$0",
        "description": "void SysCommLSCheckStatus (CommLSCheckStatusType &args)"
    },
    "SysCommLSWriteEx":{
        "prefix": "SysCommLSWriteEx()",
        "body": "SysCommLSWriteEx($1)$0",
        "description": "void SysCommLSWriteEx (CommLSWriteExType &args)"
    },
    "CurrentTick":{
        "prefix": "CurrentTick()",
        "body": "CurrentTick($1)$0",
        "description": "unsigned long CurrentTick ()"
    },
    "FirstTick":{
        "prefix": "FirstTick()",
        "body": "FirstTick($1)$0",
        "description": "unsigned long FirstTick ()"
    },
    "ResetSleepTimer":{
        "prefix": "ResetSleepTimer()",
        "body": "ResetSleepTimer($1)$0",
        "description": "long ResetSleepTimer ()"
    },
    "SysCall":{
        "prefix": "SysCall()",
        "body": "SysCall($1)$0",
        "description": "void SysCall (byte funcID, variant &args)"
    },
    "SysGetStartTick":{
        "prefix": "SysGetStartTick()",
        "body": "SysGetStartTick($1)$0",
        "description": "void SysGetStartTick (GetStartTickType &args)"
    },
    "SysKeepAlive":{
        "prefix": "SysKeepAlive()",
        "body": "SysKeepAlive($1)$0",
        "description": "void SysKeepAlive (KeepAliveType &args)"
    },
    "SysIOMapRead":{
        "prefix": "SysIOMapRead()",
        "body": "SysIOMapRead($1)$0",
        "description": "void SysIOMapRead (IOMapReadType &args)"
    },
    "SysIOMapWrite":{
        "prefix": "SysIOMapWrite()",
        "body": "SysIOMapWrite($1)$0",
        "description": "void SysIOMapWrite (IOMapWriteType &args)"
    },
    "SysIOMapReadByID":{
        "prefix": "SysIOMapReadByID()",
        "body": "SysIOMapReadByID($1)$0",
        "description": "void SysIOMapReadByID (IOMapReadByIDType &args)"
    },
    "SysIOMapWriteByID":{
        "prefix": "SysIOMapWriteByID()",
        "body": "SysIOMapWriteByID($1)$0",
        "description": "void SysIOMapWriteByID (IOMapWriteByIDType &args)"
    },
    "SysDatalogWrite":{
        "prefix": "SysDatalogWrite()",
        "body": "SysDatalogWrite($1)$0",
        "description": "void SysDatalogWrite (DatalogWriteType &args)"
    },
    "SysDatalogGetTimes":{
        "prefix": "SysDatalogGetTimes()",
        "body": "SysDatalogGetTimes($1)$0",
        "description": "void SysDatalogGetTimes (DatalogGetTimesType &args)"
    },
    "SysReadSemData":{
        "prefix": "SysReadSemData()",
        "body": "SysReadSemData($1)$0",
        "description": "void SysReadSemData (ReadSemDataType &args)"
    },
    "SysWriteSemData":{
        "prefix": "SysWriteSemData()",
        "body": "SysWriteSemData($1)$0",
        "description": "void SysWriteSemData (WriteSemDataType &args)"
    },
    "SysUpdateCalibCacheInfo":{
        "prefix": "SysUpdateCalibCacheInfo()",
        "body": "SysUpdateCalibCacheInfo($1)$0",
        "description": "void SysUpdateCalibCacheInfo (UpdateCalibCacheInfoType &args)"
    },
    "SysComputeCalibValue":{
        "prefix": "SysComputeCalibValue()",
        "body": "SysComputeCalibValue($1)$0",
        "description": "void SysComputeCalibValue (ComputeCalibValueType &args)"
    },
    "GetMemoryInfo":{
        "prefix": "GetMemoryInfo()",
        "body": "GetMemoryInfo($1)$0",
        "description": "char GetMemoryInfo (bool Compact, unsigned int &PoolSize, unsigned int &DataspaceSize)"
    },
    "SysMemoryManager":{
        "prefix": "SysMemoryManager()",
        "body": "SysMemoryManager($1)$0",
        "description": "void SysMemoryManager (MemoryManagerType &args)"
    },
    "GetLastResponseInfo":{
        "prefix": "GetLastResponseInfo()",
        "body": "GetLastResponseInfo($1)$0",
        "description": "char GetLastResponseInfo (bool Clear, byte &Length, byte &Command, byte &Buffer[ ])"
    },
    "SysReadLastResponse":{
        "prefix": "SysReadLastResponse()",
        "body": "SysReadLastResponse($1)$0",
        "description": "void SysReadLastResponse (ReadLastResponseType &args)"
    },
    "Wait":{
        "prefix": "Wait()",
        "body": "Wait($1)$0",
        "description": "void Wait (unsigned long ms)"
    },
    "Yield":{
        "prefix": "Yield()",
        "body": "Yield($1)$0",
        "description": "void Yield ()"
    },
    "StopAllTasks":{
        "prefix": "StopAllTasks()",
        "body": "StopAllTasks($1)$0",
        "description": "void StopAllTasks ()"
    },
    "Stop":{
        "prefix": "Stop()",
        "body": "Stop($1)$0",
        "description": "void Stop (bool bvalue)"
    },
    "ExitTo":{
        "prefix": "ExitTo()",
        "body": "ExitTo($1)$0",
        "description": "void ExitTo (task newTask)"
    },
    "Precedes":{
        "prefix": "Precedes()",
        "body": "Precedes($1)$0",
        "description": "void Precedes (task task1, task task2,..., task taskN)"
    },
    "Follows":{
        "prefix": "Follows()",
        "body": "Follows($1)$0",
        "description": "void Follows (task task1, task task2,..., task taskN)"
    },
    "Acquire":{
        "prefix": "Acquire()",
        "body": "Acquire($1)$0",
        "description": "void Acquire (mutex m)"
    },
    "Release":{
        "prefix": "Release()",
        "body": "Release($1)$0",
        "description": "void Release (mutex m)"
    },
    "StartTask":{
        "prefix": "StartTask()",
        "body": "StartTask($1)$0",
        "description": "void StartTask (task t)"
    },
    "StopTask":{
        "prefix": "StopTask()",
        "body": "StopTask($1)$0",
        "description": "void StopTask (task t)"
    },
    "BranchTest":{
        "prefix": "BranchTest()",
        "body": "BranchTest($1)$0",
        "description": "void BranchTest (const byte cmp, constant void lbl, variant value)"
    },
    "BranchComp":{
        "prefix": "BranchComp()",
        "body": "BranchComp($1)$0",
        "description": "void BranchComp (const byte cmp, constant void lbl, variant v1, variant v2)"
    },
    "SetIOMapBytes":{
        "prefix": "SetIOMapBytes()",
        "body": "SetIOMapBytes($1)$0",
        "description": "void SetIOMapBytes (string moduleName, unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetIOMapValue":{
        "prefix": "SetIOMapValue()",
        "body": "SetIOMapValue($1)$0",
        "description": "void SetIOMapValue (string moduleName, unsigned int offset, variant value)"
    },
    "GetIOMapBytes":{
        "prefix": "GetIOMapBytes()",
        "body": "GetIOMapBytes($1)$0",
        "description": "void GetIOMapBytes (string moduleName, unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "GetIOMapValue":{
        "prefix": "GetIOMapValue()",
        "body": "GetIOMapValue($1)$0",
        "description": "void GetIOMapValue (string moduleName, unsigned int offset, variant &value)"
    },
    "GetLowSpeedModuleBytes":{
        "prefix": "GetLowSpeedModuleBytes()",
        "body": "GetLowSpeedModuleBytes($1)$0",
        "description": "void GetLowSpeedModuleBytes (unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "GetDisplayModuleBytes":{
        "prefix": "GetDisplayModuleBytes()",
        "body": "GetDisplayModuleBytes($1)$0",
        "description": "void GetDisplayModuleBytes (unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "GetCommModuleBytes":{
        "prefix": "GetCommModuleBytes()",
        "body": "GetCommModuleBytes($1)$0",
        "description": "void GetCommModuleBytes (unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "GetCommandModuleBytes":{
        "prefix": "GetCommandModuleBytes()",
        "body": "GetCommandModuleBytes($1)$0",
        "description": "void GetCommandModuleBytes (unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "SetCommandModuleBytes":{
        "prefix": "SetCommandModuleBytes()",
        "body": "SetCommandModuleBytes($1)$0",
        "description": "void SetCommandModuleBytes (unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetLowSpeedModuleBytes":{
        "prefix": "SetLowSpeedModuleBytes()",
        "body": "SetLowSpeedModuleBytes($1)$0",
        "description": "void SetLowSpeedModuleBytes (unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetDisplayModuleBytes":{
        "prefix": "SetDisplayModuleBytes()",
        "body": "SetDisplayModuleBytes($1)$0",
        "description": "void SetDisplayModuleBytes (unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetCommModuleBytes":{
        "prefix": "SetCommModuleBytes()",
        "body": "SetCommModuleBytes($1)$0",
        "description": "void SetCommModuleBytes (unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetIOMapBytesByID":{
        "prefix": "SetIOMapBytesByID()",
        "body": "SetIOMapBytesByID($1)$0",
        "description": "void SetIOMapBytesByID (unsigned long moduleId, unsigned int offset, unsigned int count, byte data[ ])"
    },
    "SetIOMapValueByID":{
        "prefix": "SetIOMapValueByID()",
        "body": "SetIOMapValueByID($1)$0",
        "description": "void SetIOMapValueByID (unsigned long moduleId, unsigned int offset, variant value)"
    },
    "GetIOMapBytesByID":{
        "prefix": "GetIOMapBytesByID()",
        "body": "GetIOMapBytesByID($1)$0",
        "description": "void GetIOMapBytesByID (unsigned long moduleId, unsigned int offset, unsigned int count, byte &data[ ])"
    },
    "GetIOMapValueByID":{
        "prefix": "GetIOMapValueByID()",
        "body": "GetIOMapValueByID($1)$0",
        "description": "void GetIOMapValueByID (unsigned long moduleId, unsigned int offset, variant &value)"
    },
    "SetCommandModuleValue":{
        "prefix": "SetCommandModuleValue()",
        "body": "SetCommandModuleValue($1)$0",
        "description": "void SetCommandModuleValue (unsigned int offset, variant value)"
    },
    "SetIOCtrlModuleValue":{
        "prefix": "SetIOCtrlModuleValue()",
        "body": "SetIOCtrlModuleValue($1)$0",
        "description": "void SetIOCtrlModuleValue (unsigned int offset, variant value)"
    },
    "SetLoaderModuleValue":{
        "prefix": "SetLoaderModuleValue()",
        "body": "SetLoaderModuleValue($1)$0",
        "description": "void SetLoaderModuleValue (unsigned int offset, variant value)"
    },
    "SetUIModuleValue":{
        "prefix": "SetUIModuleValue()",
        "body": "SetUIModuleValue($1)$0",
        "description": "void SetUIModuleValue (unsigned int offset, variant value)"
    },
    "SetSoundModuleValue":{
        "prefix": "SetSoundModuleValue()",
        "body": "SetSoundModuleValue($1)$0",
        "description": "void SetSoundModuleValue (unsigned int offset, variant value)"
    },
    "SetButtonModuleValue":{
        "prefix": "SetButtonModuleValue()",
        "body": "SetButtonModuleValue($1)$0",
        "description": "void SetButtonModuleValue (unsigned int offset, variant value)"
    },
    "SetInputModuleValue":{
        "prefix": "SetInputModuleValue()",
        "body": "SetInputModuleValue($1)$0",
        "description": "void SetInputModuleValue (unsigned int offset, variant value)"
    },
    "SetOutputModuleValue":{
        "prefix": "SetOutputModuleValue()",
        "body": "SetOutputModuleValue($1)$0",
        "description": "void SetOutputModuleValue (unsigned int offset, variant value)"
    },
    "SetLowSpeedModuleValue":{
        "prefix": "SetLowSpeedModuleValue()",
        "body": "SetLowSpeedModuleValue($1)$0",
        "description": "void SetLowSpeedModuleValue (unsigned int offset, variant value)"
    },
    "SetDisplayModuleValue":{
        "prefix": "SetDisplayModuleValue()",
        "body": "SetDisplayModuleValue($1)$0",
        "description": "void SetDisplayModuleValue (unsigned int offset, variant value)"
    },
    "SetCommModuleValue":{
        "prefix": "SetCommModuleValue()",
        "body": "SetCommModuleValue($1)$0",
        "description": "void SetCommModuleValue (unsigned int offset, variant value)"
    },
    "GetCommandModuleValue":{
        "prefix": "GetCommandModuleValue()",
        "body": "GetCommandModuleValue($1)$0",
        "description": "void GetCommandModuleValue (unsigned int offset, variant &value)"
    },
    "GetLoaderModuleValue":{
        "prefix": "GetLoaderModuleValue()",
        "body": "GetLoaderModuleValue($1)$0",
        "description": "void GetLoaderModuleValue (unsigned int offset, variant &value)"
    },
    "GetSoundModuleValue":{
        "prefix": "GetSoundModuleValue()",
        "body": "GetSoundModuleValue($1)$0",
        "description": "void GetSoundModuleValue (unsigned int offset, variant &value)"
    },
    "GetButtonModuleValue":{
        "prefix": "GetButtonModuleValue()",
        "body": "GetButtonModuleValue($1)$0",
        "description": "void GetButtonModuleValue (unsigned int offset, variant &value)"
    },
    "GetUIModuleValue":{
        "prefix": "GetUIModuleValue()",
        "body": "GetUIModuleValue($1)$0",
        "description": "void GetUIModuleValue (unsigned int offset, variant &value)"
    },
    "GetInputModuleValue":{
        "prefix": "GetInputModuleValue()",
        "body": "GetInputModuleValue($1)$0",
        "description": "void GetInputModuleValue (unsigned int offset, variant &value)"
    },
    "GetOutputModuleValue":{
        "prefix": "GetOutputModuleValue()",
        "body": "GetOutputModuleValue($1)$0",
        "description": "void GetOutputModuleValue (unsigned int offset, variant &value)"
    },
    "GetLowSpeedModuleValue":{
        "prefix": "GetLowSpeedModuleValue()",
        "body": "GetLowSpeedModuleValue($1)$0",
        "description": "void GetLowSpeedModuleValue (unsigned int offset, variant &value)"
    },
    "GetDisplayModuleValue":{
        "prefix": "GetDisplayModuleValue()",
        "body": "GetDisplayModuleValue($1)$0",
        "description": "void GetDisplayModuleValue (unsigned int offset, variant &value)"
    },
    "GetCommModuleValue":{
        "prefix": "GetCommModuleValue()",
        "body": "GetCommModuleValue($1)$0",
        "description": "void GetCommModuleValue (unsigned int offset, variant &value)"
    },
    "ArrayBuild":{
        "prefix": "ArrayBuild()",
        "body": "ArrayBuild($1)$0",
        "description": "void ArrayBuild (variant &aout[ ], variant src1, variant src2,..., variant srcN)"
    },
    "ArrayLen":{
        "prefix": "ArrayLen()",
        "body": "ArrayLen($1)$0",
        "description": "unsigned int ArrayLen (variant data[ ])"
    },
    "ArrayInit":{
        "prefix": "ArrayInit()",
        "body": "ArrayInit($1)$0",
        "description": "void ArrayInit (variant &aout[ ], variant value, unsigned int count)"
    },
    "ArraySubset":{
        "prefix": "ArraySubset()",
        "body": "ArraySubset($1)$0",
        "description": "void ArraySubset (variant &aout[ ], variant asrc[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayIndex":{
        "prefix": "ArrayIndex()",
        "body": "ArrayIndex($1)$0",
        "description": "void ArrayIndex (variant &out, variant asrc[ ], unsigned int idx)"
    },
    "ArrayReplace":{
        "prefix": "ArrayReplace()",
        "body": "ArrayReplace($1)$0",
        "description": "void ArrayReplace (variant &asrc[ ], unsigned int idx, variant value)"
    },
    "ArraySum":{
        "prefix": "ArraySum()",
        "body": "ArraySum($1)$0",
        "description": "variant ArraySum (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayMean":{
        "prefix": "ArrayMean()",
        "body": "ArrayMean($1)$0",
        "description": "variant ArrayMean (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArraySumSqr":{
        "prefix": "ArraySumSqr()",
        "body": "ArraySumSqr($1)$0",
        "description": "variant ArraySumSqr (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayStd":{
        "prefix": "ArrayStd()",
        "body": "ArrayStd($1)$0",
        "description": "variant ArrayStd (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayMin":{
        "prefix": "ArrayMin()",
        "body": "ArrayMin($1)$0",
        "description": "variant ArrayMin (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayMax":{
        "prefix": "ArrayMax()",
        "body": "ArrayMax($1)$0",
        "description": "variant ArrayMax (const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArraySort":{
        "prefix": "ArraySort()",
        "body": "ArraySort($1)$0",
        "description": "void ArraySort (variant &dest[ ], const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "ArrayOp":{
        "prefix": "ArrayOp()",
        "body": "ArrayOp($1)$0",
        "description": "void ArrayOp (const byte op, variant &dest, const variant &src[ ], unsigned int idx, unsigned int len)"
    },
    "PowerDown":{
        "prefix": "PowerDown()",
        "body": "PowerDown($1)$0",
        "description":"void PowerDown ()"
    },
    "SleepNow":{
        "prefix":"SleepNow()",
        "body":"SleepNow($1)$0",
        "description":"void SleepNow ()"
    },
    "RebootInFirmwareMode":{
        "prefix":"RebootInFirmwareMode()",
        "body":"RebootInFirmwareMode($1)$0",
        "description":"void RebootInFirmwareMode ()"
    },
    "JoystickMessageRead":{
        "prefix": "JoystickMessageRead()",
        "body": "JoystickMessageRead($1)$0",
        "description": "char JoystickMessageRead (byte queue, JoystickMessageType &msg)"
    },
    "SendMessage":{
        "prefix": "SendMessage()",
        "body": "SendMessage($1)$0",
        "description": "char SendMessage (byte queue, string msg)"
    },
    "ReceiveMessage":{
        "prefix": "ReceiveMessage()",
        "body": "ReceiveMessage($1)$0",
        "description": "char ReceiveMessage (byte queue, bool clear, string &msg)"
    },
    "BluetoothStatus":{
        "prefix": "BluetoothStatus()",
        "body": "BluetoothStatus($1)$0",
        "description": "char BluetoothStatus (byte conn)"
    },
    "BluetoothWrite":{
        "prefix": "BluetoothWrite()",
        "body": "BluetoothWrite($1)$0",
        "description": "char BluetoothWrite (byte conn, byte buffer[])"
    },
    "RemoteConnectionWrite":{
        "prefix": "RemoteConnectionWrite()",
        "body": "RemoteConnectionWrite($1)$0",
        "description": "char RemoteConnectionWrite (byte conn, byte buffer[])"
    },
    "RemoteConnectionIdle":{
        "prefix": "RemoteConnectionIdle()",
        "body": "RemoteConnectionIdle($1)$0",
        "description": "bool RemoteConnectionIdle (byte conn)"
    },
    "SendRemoteBool":{
        "prefix": "SendRemoteBool()",
        "body": "SendRemoteBool($1)$0",
        "description": "char SendRemoteBool (byte conn, byte queue, bool bval)"
    },
    "SendRemoteNumber":{
        "prefix": "SendRemoteNumber()",
        "body": "SendRemoteNumber($1)$0",
        "description": "char SendRemoteNumber (byte conn, byte queue, long val)"
    },
    "SendRemoteString":{
        "prefix": "SendRemoteString()",
        "body": "SendRemoteString($1)$0",
        "description": "char SendRemoteString (byte conn, byte queue, string str)"
    },
    "SendResponseBool":{
        "prefix": "SendResponseBool()",
        "body": "SendResponseBool($1)$0",
        "description": "char SendResponseBool (byte queue, bool bval)"
    },
    "SendResponseNumber":{
        "prefix": "SendResponseNumber()",
        "body": "SendResponseNumber($1)$0",
        "description": "char SendResponseNumber (byte queue, long val)"
    },
    "SendResponseString":{
        "prefix": "SendResponseString()",
        "body": "SendResponseString($1)$0",
        "description": "char SendResponseString (byte queue, string str)"
    },
    "ReceiveRemoteBool":{
        "prefix": "ReceiveRemoteBool()",
        "body": "ReceiveRemoteBool($1)$0",
        "description": "char ReceiveRemoteBool (byte queue, bool clear, bool &bval)"
    },
    "ReceiveRemoteMessageEx":{
        "prefix": "ReceiveRemoteMessageEx()",
        "body": "ReceiveRemoteMessageEx($1)$0",
        "description": "char ReceiveRemoteMessageEx (byte queue, bool clear, string &str, long &val,"
    },
    "ReceiveRemoteNumber":{
        "prefix": "ReceiveRemoteNumber()",
        "body": "ReceiveRemoteNumber($1)$0",
        "description": "char ReceiveRemoteNumber (byte queue, bool clear, long &val)"
    },
    "ReceiveRemoteString":{
        "prefix": "ReceiveRemoteString()",
        "body": "ReceiveRemoteString($1)$0",
        "description": "char ReceiveRemoteString (byte queue, bool clear, string &str)"
    },
    "UseRS485":{
        "prefix": "UseRS485()",
        "body": "UseRS485($1)$0",
        "description": "void UseRS485 (void)"
    },
    "RS485Control":{
        "prefix": "RS485Control()",
        "body": "RS485Control($1)$0",
        "description": "char RS485Control (byte cmd, byte baud, unsigned int mode)"
    },
    "RS485DataAvailable":{
        "prefix": "RS485DataAvailable()",
        "body": "RS485DataAvailable($1)$0",
        "description": "byte RS485DataAvailable (void)"
    },
    "RS485Initialize":{
        "prefix": "RS485Initialize()",
        "body": "RS485Initialize($1)$0",
        "description": "char RS485Initialize (void)"
    },
    "RS485Disable":{
        "prefix": "RS485Disable()",
        "body": "RS485Disable($1)$0",
        "description": "char RS485Disable (void)"
    },
    "RS485Enable":{
        "prefix": "RS485Enable()",
        "body": "RS485Enable($1)$0",
        "description": "char RS485Enable (void)"
    },
    "RS485Read":{
        "prefix": "RS485Read()",
        "body": "RS485Read($1)$0",
        "description": "char RS485Read (byte &buffer[])"
    },
    "RS485ReadEx":{
        "prefix": "RS485ReadEx()",
        "body": "RS485ReadEx($1)$0",
        "description": "char RS485ReadEx (byte &buffer[], byte buflen)"
    },
    "RS485SendingData":{
        "prefix": "RS485SendingData()",
        "body": "RS485SendingData($1)$0",
        "description": "byte RS485SendingData (void)"
    },
    "RS485Status":{
        "prefix": "RS485Status()",
        "body": "RS485Status($1)$0",
        "description": "void RS485Status (byte &sendingData, byte &dataAvail)"
    },
    "RS485Uart":{
        "prefix": "RS485Uart()",
        "body": "RS485Uart($1)$0",
        "description": "char RS485Uart (byte baud, unsigned int mode)"
    },
    "RS485Write":{
        "prefix": "RS485Write()",
        "body": "RS485Write($1)$0",
        "description": "char RS485Write (byte buffer[])"
    },
    "SendRS485Bool":{
        "prefix": "SendRS485Bool()",
        "body": "SendRS485Bool($1)$0",
        "description": "char SendRS485Bool (bool bval)"
    },
    "SendRS485Number":{
        "prefix": "SendRS485Number()",
        "body": "SendRS485Number($1)$0",
        "description": "char SendRS485Number (long val)"
    },
    "SendRS485String":{
        "prefix": "SendRS485String()",
        "body": "SendRS485String($1)$0",
        "description": "char SendRS485String (string str)"
    },
    "GetBTInputBuffer":{
        "prefix": "GetBTInputBuffer()",
        "body": "GetBTInputBuffer($1)$0",
        "description": "void GetBTInputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetBTOutputBuffer":{
        "prefix": "GetBTOutputBuffer()",
        "body": "GetBTOutputBuffer($1)$0",
        "description": "void GetBTOutputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetHSInputBuffer":{
        "prefix": "GetHSInputBuffer()",
        "body": "GetHSInputBuffer($1)$0",
        "description": "void GetHSInputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetHSOutputBuffer":{
        "prefix": "GetHSOutputBuffer()",
        "body": "GetHSOutputBuffer($1)$0",
        "description": "void GetHSOutputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetUSBInputBuffer":{
        "prefix": "GetUSBInputBuffer()",
        "body": "GetUSBInputBuffer($1)$0",
        "description": "void GetUSBInputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetUSBOutputBuffer":{
        "prefix": "GetUSBOutputBuffer()",
        "body": "GetUSBOutputBuffer($1)$0",
        "description": "void GetUSBOutputBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "GetUSBPollBuffer":{
        "prefix": "GetUSBPollBuffer()",
        "body": "GetUSBPollBuffer($1)$0",
        "description": "void GetUSBPollBuffer (const byte offset, byte cnt, byte &data[])"
    },
    "BTDeviceName":{
        "prefix": "BTDeviceName()",
        "body": "BTDeviceName($1)$0",
        "description": "string BTDeviceName (const byte devidx)"
    },
    "BTConnectionName":{
        "prefix": "BTConnectionName()",
        "body": "BTConnectionName($1)$0",
        "description": "string BTConnectionName (const byte conn)"
    },
    "BTConnectionPinCode":{
        "prefix": "BTConnectionPinCode()",
        "body": "BTConnectionPinCode($1)$0",
        "description": "string BTConnectionPinCode (const byte conn)"
    },
    "BrickDataName":{
        "prefix": "BrickDataName()",
        "body": "BrickDataName($1)$0",
        "description": "string BrickDataName (void)"
    },
    "GetBTDeviceAddress":{
        "prefix": "GetBTDeviceAddress()",
        "body": "GetBTDeviceAddress($1)$0",
        "description": "void GetBTDeviceAddress (const byte devidx, byte &data[])"
    },
    "GetBTConnectionAddress":{
        "prefix": "GetBTConnectionAddress()",
        "body": "GetBTConnectionAddress($1)$0",
        "description": "void GetBTConnectionAddress (const byte conn, byte &data[])"
    },
    "GetBrickDataAddress":{
        "prefix": "GetBrickDataAddress()",
        "body": "GetBrickDataAddress($1)$0",
        "description": "void GetBrickDataAddress (byte &data[])"
    },
    "BTDeviceClass":{
        "prefix": "BTDeviceClass()",
        "body": "BTDeviceClass($1)$0",
        "description": "long BTDeviceClass (const byte devidx)"
    },
    "BTDeviceStatus":{
        "prefix": "BTDeviceStatus()",
        "body": "BTDeviceStatus($1)$0",
        "description": "byte BTDeviceStatus (const byte devidx)"
    },
    "BTConnectionClass":{
        "prefix": "BTConnectionClass()",
        "body": "BTConnectionClass($1)$0",
        "description": "long BTConnectionClass (const byte conn)"
    },
    "BTConnectionHandleNum":{
        "prefix": "BTConnectionHandleNum()",
        "body": "BTConnectionHandleNum($1)$0",
        "description": "byte BTConnectionHandleNum (const byte conn)"
    },
    "BTConnectionStreamStatus":{
        "prefix": "BTConnectionStreamStatus()",
        "body": "BTConnectionStreamStatus($1)$0",
        "description": "byte BTConnectionStreamStatus (const byte conn)"
    },
    "BTConnectionLinkQuality":{
        "prefix": "BTConnectionLinkQuality()",
        "body": "BTConnectionLinkQuality($1)$0",
        "description": "byte BTConnectionLinkQuality (const byte conn)"
    },
    "BrickDataBluecoreVersion":{
        "prefix": "BrickDataBluecoreVersion()",
        "body": "BrickDataBluecoreVersion($1)$0",
        "description": "int BrickDataBluecoreVersion (void)"
    },
    "BrickDataBtStateStatus":{
        "prefix": "BrickDataBtStateStatus()",
        "body": "BrickDataBtStateStatus($1)$0",
        "description": "byte BrickDataBtStateStatus (void)"
    },
    "BrickDataBtHardwareStatus":{
        "prefix": "BrickDataBtHardwareStatus()",
        "body": "BrickDataBtHardwareStatus($1)$0",
        "description": "byte BrickDataBtHardwareStatus (void)"
    },
    "BrickDataTimeoutValue":{
        "prefix": "BrickDataTimeoutValue()",
        "body": "BrickDataTimeoutValue($1)$0",
        "description": "byte BrickDataTimeoutValue (void)"
    },
    "BTInputBufferInPtr":{
        "prefix": "BTInputBufferInPtr()",
        "body": "BTInputBufferInPtr($1)$0",
        "description": "byte BTInputBufferInPtr (void)"
    },
    "BTInputBufferOutPtr":{
        "prefix": "BTInputBufferOutPtr()",
        "body": "BTInputBufferOutPtr($1)$0",
        "description": "byte BTInputBufferOutPtr (void)"
    },
    "BTOutputBufferInPtr":{
        "prefix": "BTOutputBufferInPtr()",
        "body": "BTOutputBufferInPtr($1)$0",
        "description": "byte BTOutputBufferInPtr (void)"
    },
    "BTOutputBufferOutPtr":{
        "prefix": "BTOutputBufferOutPtr()",
        "body": "BTOutputBufferOutPtr($1)$0",
        "description": "byte BTOutputBufferOutPtr (void)"
    },
    "HSInputBufferInPtr":{
        "prefix": "HSInputBufferInPtr()",
        "body": "HSInputBufferInPtr($1)$0",
        "description": "byte HSInputBufferInPtr (void)"
    },
    "HSInputBufferOutPtr":{
        "prefix": "HSInputBufferOutPtr()",
        "body": "HSInputBufferOutPtr($1)$0",
        "description": "byte HSInputBufferOutPtr (void)"
    },
    "HSOutputBufferInPtr":{
        "prefix": "HSOutputBufferInPtr()",
        "body": "HSOutputBufferInPtr($1)$0",
        "description": "byte HSOutputBufferInPtr (void)"
    },
    "HSOutputBufferOutPtr":{
        "prefix": "HSOutputBufferOutPtr()",
        "body": "HSOutputBufferOutPtr($1)$0",
        "description": "byte HSOutputBufferOutPtr (void)"
    },
    "USBInputBufferInPtr":{
        "prefix": "USBInputBufferInPtr()",
        "body": "USBInputBufferInPtr($1)$0",
        "description": "byte USBInputBufferInPtr (void)"
    },
    "USBInputBufferOutPtr":{
        "prefix": "USBInputBufferOutPtr()",
        "body": "USBInputBufferOutPtr($1)$0",
        "description": "byte USBInputBufferOutPtr (void)"
    },
    "USBOutputBufferInPtr":{
        "prefix": "USBOutputBufferInPtr()",
        "body": "USBOutputBufferInPtr($1)$0",
        "description": "byte USBOutputBufferInPtr (void)"
    },
    "USBOutputBufferOutPtr":{
        "prefix": "USBOutputBufferOutPtr()",
        "body": "USBOutputBufferOutPtr($1)$0",
        "description": "byte USBOutputBufferOutPtr (void)"
    },
    "USBPollBufferInPtr":{
        "prefix": "USBPollBufferInPtr()",
        "body": "USBPollBufferInPtr($1)$0",
        "description": "byte USBPollBufferInPtr (void)"
    },
    "USBPollBufferOutPtr":{
        "prefix": "USBPollBufferOutPtr()",
        "body": "USBPollBufferOutPtr($1)$0",
        "description": "byte USBPollBufferOutPtr (void)"
    },
    "BTDeviceCount":{
        "prefix": "BTDeviceCount()",
        "body": "BTDeviceCount($1)$0",
        "description": "byte BTDeviceCount (void)"
    },
    "BTDeviceNameCount":{
        "prefix": "BTDeviceNameCount()",
        "body": "BTDeviceNameCount($1)$0",
        "description": "byte BTDeviceNameCount (void)"
    },
    "HSFlags":{
        "prefix": "HSFlags()",
        "body": "HSFlags($1)$0",
        "description": "byte HSFlags (void)"
    },
    "HSSpeed":{
        "prefix": "HSSpeed()",
        "body": "HSSpeed($1)$0",
        "description": "byte HSSpeed (void)"
    },
    "HSState":{
        "prefix": "HSState()",
        "body": "HSState($1)$0",
        "description": "byte HSState (void)"
    },
    "HSAddress":{
        "prefix": "HSAddress()",
        "body": "HSAddress($1)$0",
        "description": "byte HSAddress (void)"
    },
    "HSMode":{
        "prefix": "HSMode()",
        "body": "HSMode($1)$0",
        "description": "int HSMode (void)"
    },
    "BTDataMode":{
        "prefix": "BTDataMode()",
        "body": "BTDataMode($1)$0",
        "description": "int BTDataMode (void)"
    },
    "HSDataMode":{
        "prefix": "HSDataMode()",
        "body": "HSDataMode($1)$0",
        "description": "int HSDataMode (void)"
    },
    "USBState":{
        "prefix": "USBState()",
        "body": "USBState($1)$0",
        "description": "byte USBState (void)"
    },
    "SetBTInputBuffer":{
        "prefix": "SetBTInputBuffer()",
        "body": "SetBTInputBuffer($1)$0",
        "description": "void SetBTInputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetBTInputBufferInPtr":{
        "prefix": "SetBTInputBufferInPtr()",
        "body": "SetBTInputBufferInPtr($1)$0",
        "description": "void SetBTInputBufferInPtr (byte n)"
    },
    "SetBTInputBufferOutPtr":{
        "prefix": "SetBTInputBufferOutPtr()",
        "body": "SetBTInputBufferOutPtr($1)$0",
        "description": "void SetBTInputBufferOutPtr (byte n)"
    },
    "SetBTOutputBuffer":{
        "prefix": "SetBTOutputBuffer()",
        "body": "SetBTOutputBuffer($1)$0",
        "description": "void SetBTOutputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetBTOutputBufferInPtr":{
        "prefix": "SetBTOutputBufferInPtr()",
        "body": "SetBTOutputBufferInPtr($1)$0",
        "description": "void SetBTOutputBufferInPtr (byte n)"
    },
    "SetBTOutputBufferOutPtr":{
        "prefix": "SetBTOutputBufferOutPtr()",
        "body": "SetBTOutputBufferOutPtr($1)$0",
        "description": "void SetBTOutputBufferOutPtr (byte n)"
    },
    "SetHSInputBuffer":{
        "prefix": "SetHSInputBuffer()",
        "body": "SetHSInputBuffer($1)$0",
        "description": "void SetHSInputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetHSInputBufferInPtr":{
        "prefix": "SetHSInputBufferInPtr()",
        "body": "SetHSInputBufferInPtr($1)$0",
        "description": "void SetHSInputBufferInPtr (byte n)"
    },
    "SetHSInputBufferOutPtr":{
        "prefix": "SetHSInputBufferOutPtr()",
        "body": "SetHSInputBufferOutPtr($1)$0",
        "description": "void SetHSInputBufferOutPtr (byte n)"
    },
    "SetHSOutputBuffer":{
        "prefix": "SetHSOutputBuffer()",
        "body": "SetHSOutputBuffer($1)$0",
        "description": "void SetHSOutputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetHSOutputBufferInPtr":{
        "prefix": "SetHSOutputBufferInPtr()",
        "body": "SetHSOutputBufferInPtr($1)$0",
        "description": "void SetHSOutputBufferInPtr (byte n)"
    },
    "SetHSOutputBufferOutPtr":{
        "prefix": "SetHSOutputBufferOutPtr()",
        "body": "SetHSOutputBufferOutPtr($1)$0",
        "description": "void SetHSOutputBufferOutPtr (byte n)"
    },
    "SetUSBInputBuffer":{
        "prefix": "SetUSBInputBuffer()",
        "body": "SetUSBInputBuffer($1)$0",
        "description": "void SetUSBInputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetUSBInputBufferInPtr":{
        "prefix": "SetUSBInputBufferInPtr()",
        "body": "SetUSBInputBufferInPtr($1)$0",
        "description": "void SetUSBInputBufferInPtr (byte n)"
    },
    "SetUSBInputBufferOutPtr":{
        "prefix": "SetUSBInputBufferOutPtr()",
        "body": "SetUSBInputBufferOutPtr($1)$0",
        "description": "void SetUSBInputBufferOutPtr (byte n)"
    },
    "SetUSBOutputBuffer":{
        "prefix": "SetUSBOutputBuffer()",
        "body": "SetUSBOutputBuffer($1)$0",
        "description": "void SetUSBOutputBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetUSBOutputBufferInPtr":{
        "prefix": "SetUSBOutputBufferInPtr()",
        "body": "SetUSBOutputBufferInPtr($1)$0",
        "description": "void SetUSBOutputBufferInPtr (byte n)"
    },
    "SetUSBOutputBufferOutPtr":{
        "prefix": "SetUSBOutputBufferOutPtr()",
        "body": "SetUSBOutputBufferOutPtr($1)$0",
        "description": "void SetUSBOutputBufferOutPtr (byte n)"
    },
    "SetUSBPollBuffer":{
        "prefix": "SetUSBPollBuffer()",
        "body": "SetUSBPollBuffer($1)$0",
        "description": "void SetUSBPollBuffer (const byte offset, byte cnt, byte data[])"
    },
    "SetUSBPollBufferInPtr":{
        "prefix": "SetUSBPollBufferInPtr()",
        "body": "SetUSBPollBufferInPtr($1)$0",
        "description": "void SetUSBPollBufferInPtr (byte n)"
    },
    "SetUSBPollBufferOutPtr":{
        "prefix": "SetUSBPollBufferOutPtr()",
        "body": "SetUSBPollBufferOutPtr($1)$0",
        "description": "void SetUSBPollBufferOutPtr (byte n)"
    },
    "SetHSFlags":{
        "prefix": "SetHSFlags()",
        "body": "SetHSFlags($1)$0",
        "description": "void SetHSFlags (byte hsFlags)"
    },
    "SetHSSpeed":{
        "prefix": "SetHSSpeed()",
        "body": "SetHSSpeed($1)$0",
        "description": "void SetHSSpeed (byte hsSpeed)"
    },
    "SetHSState":{
        "prefix": "SetHSState()",
        "body": "SetHSState($1)$0",
        "description": "void SetHSState (byte hsState)"
    },
    "SetHSAddress":{
        "prefix": "SetHSAddress()",
        "body": "SetHSAddress($1)$0",
        "description": "void SetHSAddress (byte hsAddress)"
    },
    "SetHSMode":{
        "prefix": "SetHSMode()",
        "body": "SetHSMode($1)$0",
        "description": "void SetHSMode (unsigned int hsMode)"
    },
    "SetBTDataMode":{
        "prefix": "SetBTDataMode()",
        "body": "SetBTDataMode($1)$0",
        "description": "void SetBTDataMode (const byte dataMode)"
    },
    "SetHSDataMode":{
        "prefix": "SetHSDataMode()",
        "body": "SetHSDataMode($1)$0",
        "description": "void SetHSDataMode (const byte dataMode)"
    },
    "SetUSBState":{
        "prefix": "SetUSBState()",
        "body": "SetUSBState($1)$0",
        "description": "void SetUSBState (byte usbState)"
    },
    "SysMessageWrite":{
        "prefix": "SysMessageWrite()",
        "body": "SysMessageWrite($1)$0",
        "description": "void SysMessageWrite (MessageWriteType &args)"
    },
    "SysMessageRead":{
        "prefix": "SysMessageRead()",
        "body": "SysMessageRead($1)$0",
        "description": "void SysMessageRead (MessageReadType &args)"
    },
    "SysCommBTWrite":{
        "prefix": "SysCommBTWrite()",
        "body": "SysCommBTWrite($1)$0",
        "description": "void SysCommBTWrite (CommBTWriteType &args)"
    },
    "SysCommBTCheckStatus":{
        "prefix": "SysCommBTCheckStatus()",
        "body": "SysCommBTCheckStatus($1)$0",
        "description": "void SysCommBTCheckStatus (CommBTCheckStatusType &args)"
    },
    "SysCommExecuteFunction":{
        "prefix": "SysCommExecuteFunction()",
        "body": "SysCommExecuteFunction($1)$0",
        "description": "void SysCommExecuteFunction (CommExecuteFunctionType &args)"
    },
    "SysCommHSControl":{
        "prefix": "SysCommHSControl()",
        "body": "SysCommHSControl($1)$0",
        "description": "void SysCommHSControl (CommHSControlType &args)"
    },
    "SysCommHSCheckStatus":{
        "prefix": "SysCommHSCheckStatus()",
        "body": "SysCommHSCheckStatus($1)$0",
        "description": "void SysCommHSCheckStatus (CommHSCheckStatusType &args)"
    },
    "SysCommHSRead":{
        "prefix": "SysCommHSRead()",
        "body": "SysCommHSRead($1)$0",
        "description": "void SysCommHSRead (CommHSReadWriteType &args)"
    },
    "SysCommHSWrite":{
        "prefix": "SysCommHSWrite()",
        "body": "SysCommHSWrite($1)$0",
        "description": "void SysCommHSWrite (CommHSReadWriteType &args)"
    },
    "SysCommBTOnOff":{
        "prefix": "SysCommBTOnOff()",
        "body": "SysCommBTOnOff($1)$0",
        "description": "void SysCommBTOnOff (CommBTOnOffType &args)"
    },
    "SysCommBTConnection":{
        "prefix": "SysCommBTConnection()",
        "body": "SysCommBTConnection($1)$0",
        "description": "void SysCommBTConnection (CommBTConnectionType &args)"
    },
    "RemoteKeepAlive":{
        "prefix": "RemoteKeepAlive()",
        "body": "RemoteKeepAlive($1)$0",
        "description": "char RemoteKeepAlive (byte conn)"
    },
    "RemoteMessageRead":{
        "prefix": "RemoteMessageRead()",
        "body": "RemoteMessageRead($1)$0",
        "description": "char RemoteMessageRead (byte conn, byte queue)"
    },
    "RemoteMessageWrite":{
        "prefix": "RemoteMessageWrite()",
        "body": "RemoteMessageWrite($1)$0",
        "description": "char RemoteMessageWrite (byte conn, byte queue, string msg)"
    },
    "RemotePlaySoundFile":{
        "prefix": "RemotePlaySoundFile()",
        "body": "RemotePlaySoundFile($1)$0",
        "description": "char RemotePlaySoundFile (byte conn, string filename, bool bloop)"
    },
    "RemotePlayTone":{
        "prefix": "RemotePlayTone()",
        "body": "RemotePlayTone($1)$0",
        "description": "char RemotePlayTone (byte conn, unsigned int frequency, unsigned int dura"
    },
    "RemoteResetMotorPosition":{
        "prefix": "RemoteResetMotorPosition()",
        "body": "RemoteResetMotorPosition($1)$0",
        "description": "char RemoteResetMotorPosition (byte conn, byte port, bool brelative)"
    },
    "RemoteResetScaledValue":{
        "prefix": "RemoteResetScaledValue()",
        "body": "RemoteResetScaledValue($1)$0",
        "description": "char RemoteResetScaledValue (byte conn, byte port)"
    },
    "RemoteSetInputMode":{
        "prefix": "RemoteSetInputMode()",
        "body": "RemoteSetInputMode($1)$0",
        "description": "char RemoteSetInputMode (byte conn, byte port, byte type, byte mode)"
    },
    "RemoteSetOutputState":{
        "prefix": "RemoteSetOutputState()",
        "body": "RemoteSetOutputState($1)$0",
        "description": "char RemoteSetOutputState (byte conn, byte port, char speed, byte mode, byte regmode, char turnpct, byte runstate, unsigned long tacholimit)"
    },
    "RemoteStartProgram":{
        "prefix": "RemoteStartProgram()",
        "body": "RemoteStartProgram($1)$0",
        "description": "char RemoteStartProgram (byte conn, string filename)"
    },
    "RemoteStopProgram":{
        "prefix": "RemoteStopProgram()",
        "body": "RemoteStopProgram($1)$0",
        "description": "char RemoteStopProgram (byte conn)"
    },
    "RemoteStopSound":{
        "prefix": "RemoteStopSound()",
        "body": "RemoteStopSound($1)$0",
        "description": "char RemoteStopSound (byte conn)"
    },
    "RemoteGetOutputState":{
        "prefix": "RemoteGetOutputState()",
        "body": "RemoteGetOutputState($1)$0",
        "description": "char RemoteGetOutputState (byte conn, OutputStateType &params)"
    },
    "RemoteGetInputValues":{
        "prefix": "RemoteGetInputValues()",
        "body": "RemoteGetInputValues($1)$0",
        "description": "char RemoteGetInputValues (byte conn, InputValuesType &params)"
    },
    "RemoteGetBatteryLevel":{
        "prefix": "RemoteGetBatteryLevel()",
        "body": "RemoteGetBatteryLevel($1)$0",
        "description": "char RemoteGetBatteryLevel (byte conn, int &value)"
    },
    "RemoteLowspeedGetStatus":{
        "prefix": "RemoteLowspeedGetStatus()",
        "body": "RemoteLowspeedGetStatus($1)$0",
        "description": "char RemoteLowspeedGetStatus (byte conn, byte &value)"
    },
    "RemoteLowspeedRead":{
        "prefix": "RemoteLowspeedRead()",
        "body": "RemoteLowspeedRead($1)$0",
        "description": "char RemoteLowspeedRead (byte conn, byte port, byte &bread, byte &data[])"
    },
    "RemoteGetCurrentProgramName":{
        "prefix": "RemoteGetCurrentProgramName()",
        "body": "RemoteGetCurrentProgramName($1)$0",
        "description": "char RemoteGetCurrentProgramName (byte conn, string &name)"
    },
    "RemoteDatalogRead":{
        "prefix": "RemoteDatalogRead()",
        "body": "RemoteDatalogRead($1)$0",
        "description": "char RemoteDatalogRead (byte conn, bool remove, byte &cnt, byte &log[])"
    },
    "RemoteGetContactCount":{
        "prefix": "RemoteGetContactCount()",
        "body": "RemoteGetContactCount($1)$0",
        "description": "char RemoteGetContactCount (byte conn, byte &cnt)"
    },
    "RemoteGetContactName":{
        "prefix": "RemoteGetContactName()",
        "body": "RemoteGetContactName($1)$0",
        "description": "char RemoteGetContactName (byte conn, byte idx, string &name)"
    },
    "RemoteGetConnectionCount":{
        "prefix": "RemoteGetConnectionCount()",
        "body": "RemoteGetConnectionCount($1)$0",
        "description": "char RemoteGetConnectionCount (byte conn, byte &cnt)"
    },
    "RemoteGetConnectionName":{
        "prefix": "RemoteGetConnectionName()",
        "body": "RemoteGetConnectionName($1)$0",
        "description": "char RemoteGetConnectionName (byte conn, byte idx, string &name)"
    },
    "RemoteGetProperty":{
        "prefix": "RemoteGetProperty()",
        "body": "RemoteGetProperty($1)$0",
        "description": "char RemoteGetProperty (byte conn, byte property, variant &value)"
    },
    "RemoteResetTachoCount":{
        "prefix": "RemoteResetTachoCount()",
        "body": "RemoteResetTachoCount($1)$0",
        "description": "char RemoteResetTachoCount (byte conn, byte port)"
    },
    "RemoteDatalogSetTimes":{
        "prefix": "RemoteDatalogSetTimes()",
        "body": "RemoteDatalogSetTimes($1)$0",
        "description": "char RemoteDatalogSetTimes (byte conn, long synctime)"
    },
    "RemoteSetProperty":{
        "prefix": "RemoteSetProperty()",
        "body": "RemoteSetProperty($1)$0",
        "description": "char RemoteSetProperty (byte conn, byte prop, variant value)"
    },
    "RemoteLowspeedWrite":{
        "prefix": "RemoteLowspeedWrite()",
        "body": "RemoteLowspeedWrite($1)$0",
        "description": "char RemoteLowspeedWrite (byte conn, byte port, byte txlen, byte rxlen, byte data[ ])"
    },
    "RemoteOpenRead":{
        "prefix": "RemoteOpenRead()",
        "body": "RemoteOpenRead($1)$0",
        "description": "char RemoteOpenRead (byte conn, string filename, byte &handle, long &size)"
    },
    "RemoteOpenAppendData":{
        "prefix": "RemoteOpenAppendData()",
        "body": "RemoteOpenAppendData($1)$0",
        "description": "char RemoteOpenAppendData (byte conn, string filename, byte &handle, long &size)"
    },
    "RemoteDeleteFile":{
        "prefix": "RemoteDeleteFile()",
        "body": "RemoteDeleteFile($1)$0",
        "description": "char RemoteDeleteFile (byte conn, string filename)"
    },
    "RemoteFindFirstFile":{
        "prefix": "RemoteFindFirstFile()",
        "body": "RemoteFindFirstFile($1)$0",
        "description": "char RemoteFindFirstFile (byte conn, string mask, byte &handle, string &name,"
    },
    "RemoteGetFirmwareVersion":{
        "prefix": "RemoteGetFirmwareVersion()",
        "body": "RemoteGetFirmwareVersion($1)$0",
        "description": "char RemoteGetFirmwareVersion (byte conn, byte &pmin, byte &pmaj, byte &fmin, byte &fmaj)"
    },
    "RemoteGetBluetoothAddress":{
        "prefix": "RemoteGetBluetoothAddress()",
        "body": "RemoteGetBluetoothAddress($1)$0",
        "description": "char RemoteGetBluetoothAddress (byte conn, byte &btaddr[])"
    },
    "RemoteGetDeviceInfo":{
        "prefix": "RemoteGetDeviceInfo()",
        "body": "RemoteGetDeviceInfo($1)$0",
        "description": "char RemoteGetDeviceInfo (byte conn, string &name, byte &btaddr[], byte &btsignal[], long &freemem)"
    },
    "RemoteDeleteUserFlash":{
        "prefix": "RemoteDeleteUserFlash()",
        "body": "RemoteDeleteUserFlash($1)$0",
        "description": "char RemoteDeleteUserFlash (byte conn)"
    },
    "RemoteOpenWrite":{
        "prefix": "RemoteOpenWrite()",
        "body": "RemoteOpenWrite($1)$0",
        "description": "char RemoteOpenWrite (byte conn, string filename, long size, byte &handle)"
    },
    "RemoteOpenWriteLinear":{
        "prefix": "RemoteOpenWriteLinear()",
        "body": "RemoteOpenWriteLinear($1)$0",
        "description": "char RemoteOpenWriteLinear (byte conn, string filename, long size, byte &handle)"
    },
    "RemoteOpenWriteData":{
        "prefix": "RemoteOpenWriteData()",
        "body": "RemoteOpenWriteData($1)$0",
        "description": "char RemoteOpenWriteData (byte conn, string filename, long size, byte &handle)"
    },
    "RemoteCloseFile":{
        "prefix": "RemoteCloseFile()",
        "body": "RemoteCloseFile($1)$0",
        "description": "char RemoteCloseFile (byte conn, byte handle)"
    },
    "RemoteFindNextFile":{
        "prefix": "RemoteFindNextFile()",
        "body": "RemoteFindNextFile($1)$0",
        "description": "char RemoteFindNextFile (byte conn, byte &handle, string &name, long &size)"
    },
    "RemotePollCommandLength":{
        "prefix": "RemotePollCommandLength()",
        "body": "RemotePollCommandLength($1)$0",
        "description": "char RemotePollCommandLength (byte conn, byte bufnum, byte &length)"
    },
    "RemoteWrite":{
        "prefix": "RemoteWrite()",
        "body": "RemoteWrite($1)$0",
        "description": "char RemoteWrite (byte conn, byte &handle, int &numbytes, byte data[])"
    },
    "RemoteRead":{
        "prefix": "RemoteRead()",
        "body": "RemoteRead($1)$0",
        "description": "char RemoteRead (byte conn, byte &handle, int &numbytes, byte &data[])"
    },
    "RemoteIOMapRead":{
        "prefix": "RemoteIOMapRead()",
        "body": "RemoteIOMapRead($1)$0",
        "description": "char RemoteIOMapRead (byte conn, long id, int offset, int &numbytes, byte &data[])"
    },
    "RemotePollCommand(byte":{
        "prefix": "RemotePollCommand(byte()",
        "body": "RemotePollCommand(byte($1)$0",
        "description": "char RemotePollCommand(byte conn, byte bufnum, byte &len, byte &data[])"
    },
    "RemoteRenameFile":{
        "prefix": "RemoteRenameFile()",
        "body": "RemoteRenameFile($1)$0",
        "description": "char RemoteRenameFile (byte conn, string oldname, string newname)"
    },
    "RemoteBluetoothFactoryReset":{
        "prefix": "RemoteBluetoothFactoryReset()",
        "body": "RemoteBluetoothFactoryReset($1)$0",
        "description": "char RemoteBluetoothFactoryReset (byte conn)"
    },
    "RemoteIOMapWriteValue":{
        "prefix": "RemoteIOMapWriteValue()",
        "body": "RemoteIOMapWriteValue($1)$0",
        "description": "char RemoteIOMapWriteValue (byte conn, long id, int offset, variant value)"
    },
    "RemoteIOMapWriteBytes":{
        "prefix": "RemoteIOMapWriteBytes()",
        "body": "RemoteIOMapWriteBytes($1)$0",
        "description": "char RemoteIOMapWriteBytes (byte conn, long id, int offset, byte data[])"
    },
    "RemoteSetBrickName":{
        "prefix": "RemoteSetBrickName()",
        "body": "RemoteSetBrickName($1)$0",
        "description": "char RemoteSetBrickName (byte conn, string name)"
    },
    "ButtonPressed":{
        "prefix": "ButtonPressed()",
        "body": "ButtonPressed($1)$0",
        "description": "bool ButtonPressed (const byte btn, bool resetCount)"
    },
    "ButtonCount":{
        "prefix": "ButtonCount()",
        "body": "ButtonCount($1)$0",
        "description": "byte ButtonCount (const byte btn, bool resetCount)"
    },
    "ReadButtonEx":{
        "prefix": "ReadButtonEx()",
        "body": "ReadButtonEx($1)$0",
        "description": "char ReadButtonEx (const byte btn, bool reset, bool &pressed, unsigned int &count)"
    },
    "ButtonPressCount":{
        "prefix": "ButtonPressCount()",
        "body": "ButtonPressCount($1)$0",
        "description": "byte ButtonPressCount (const byte btn)"
    },
    "ButtonLongPressCount":{
        "prefix": "ButtonLongPressCount()",
        "body": "ButtonLongPressCount($1)$0",
        "description": "byte ButtonLongPressCount (const byte btn)"
    },
    "ButtonShortReleaseCount":{
        "prefix": "ButtonShortReleaseCount()",
        "body": "ButtonShortReleaseCount($1)$0",
        "description": "byte ButtonShortReleaseCount (const byte btn)"
    },
    "ButtonLongReleaseCount":{
        "prefix": "ButtonLongReleaseCount()",
        "body": "ButtonLongReleaseCount($1)$0",
        "description": "byte ButtonLongReleaseCount (const byte btn)"
    },
    "ButtonReleaseCount":{
        "prefix": "ButtonReleaseCount()",
        "body": "ButtonReleaseCount($1)$0",
        "description": "byte ButtonReleaseCount (const byte btn)"
    },
    "ButtonState":{
        "prefix": "ButtonState()",
        "body": "ButtonState($1)$0",
        "description": "byte ButtonState (const byte btn)"
    },
    "SetButtonLongPressCount":{
        "prefix": "SetButtonLongPressCount()",
        "body": "SetButtonLongPressCount($1)$0",
        "description": "void SetButtonLongPressCount (const byte btn, const byte n)"
    },
    "SetButtonLongReleaseCount":{
        "prefix": "SetButtonLongReleaseCount()",
        "body": "SetButtonLongReleaseCount($1)$0",
        "description": "void SetButtonLongReleaseCount (const byte btn, const byte n)"
    },
    "SetButtonPressCount":{
        "prefix": "SetButtonPressCount()",
        "body": "SetButtonPressCount($1)$0",
        "description": "void SetButtonPressCount (const byte btn, const byte n)"
    },
    "SetButtonReleaseCount":{
        "prefix": "SetButtonReleaseCount()",
        "body": "SetButtonReleaseCount($1)$0",
        "description": "void SetButtonReleaseCount (const byte btn, const byte n)"
    },
    "SetButtonShortReleaseCount":{
        "prefix": "SetButtonShortReleaseCount()",
        "body": "SetButtonShortReleaseCount($1)$0",
        "description": "void SetButtonShortReleaseCount (const byte btn, const byte n)"
    },
    "SetButtonState":{
        "prefix": "SetButtonState()",
        "body": "SetButtonState($1)$0",
        "description": "void SetButtonState (const byte btn, const byte state)"
    },
    "SysReadButton":{
        "prefix": "SysReadButton()",
        "body": "SysReadButton($1)$0",
        "description": "void SysReadButton (ReadButtonType &args)"
    },
    "CommandFlags":{
        "prefix": "CommandFlags()",
        "body": "CommandFlags($1)$0",
        "description": "byte CommandFlags (void)"
    },
    "UIState":{
        "prefix": "UIState()",
        "body": "UIState($1)$0",
        "description": "byte UIState (void)"
    },
    "UIButton":{
        "prefix": "UIButton()",
        "body": "UIButton($1)$0",
        "description": "byte UIButton (void)"
    },
    "VMRunState":{
        "prefix": "VMRunState()",
        "body": "VMRunState($1)$0",
        "description": "byte VMRunState (void)"
    },
    "BatteryState":{
        "prefix": "BatteryState()",
        "body": "BatteryState($1)$0",
        "description": "byte BatteryState (void)"
    },
    "BluetoothState":{
        "prefix": "BluetoothState()",
        "body": "BluetoothState($1)$0",
        "description": "byte BluetoothState (void)"
    },
    "UsbState":{
        "prefix": "UsbState()",
        "body": "UsbState($1)$0",
        "description": "byte UsbState (void)"
    },
    "SleepTimeout":{
        "prefix": "SleepTimeout()",
        "body": "SleepTimeout($1)$0",
        "description": "byte SleepTimeout (void)"
    },
    "SleepTime":{
        "prefix": "SleepTime()",
        "body": "SleepTime($1)$0",
        "description": "byte SleepTime (void)"
    },
    "SleepTimer":{
        "prefix": "SleepTimer()",
        "body": "SleepTimer($1)$0",
        "description": "byte SleepTimer (void)"
    },
    "RechargeableBattery":{
        "prefix": "RechargeableBattery()",
        "body": "RechargeableBattery($1)$0",
        "description": "bool RechargeableBattery (void)"
    },
    "Volume":{
        "prefix": "Volume()",
        "body": "Volume($1)$0",
        "description": "byte Volume (void)"
    },
    "OnBrickProgramPointer":{
        "prefix": "OnBrickProgramPointer()",
        "body": "OnBrickProgramPointer($1)$0",
        "description": "byte OnBrickProgramPointer (void)"
    },
    "AbortFlag":{
        "prefix": "AbortFlag()",
        "body": "AbortFlag($1)$0",
        "description": "byte AbortFlag (void)"
    },
    "LongAbort":{
        "prefix": "LongAbort()",
        "body": "LongAbort($1)$0",
        "description": "byte LongAbort (void)"
    },
    "BatteryLevel":{
        "prefix": "BatteryLevel()",
        "body": "BatteryLevel($1)$0",
        "description": "unsigned int BatteryLevel (void)"
    },
    "SetCommandFlags":{
        "prefix": "SetCommandFlags()",
        "body": "SetCommandFlags($1)$0",
        "description": "void SetCommandFlags (const byte cmdFlags)"
    },
    "SetUIButton":{
        "prefix": "SetUIButton()",
        "body": "SetUIButton($1)$0",
        "description": "void SetUIButton (byte btn)"
    },
    "SetUIState":{
        "prefix": "SetUIState()",
        "body": "SetUIState($1)$0",
        "description": "void SetUIState (byte state)"
    },
    "SetVMRunState":{
        "prefix": "SetVMRunState()",
        "body": "SetVMRunState($1)$0",
        "description": "void SetVMRunState (const byte vmRunState)"
    },
    "SetBatteryState":{
        "prefix": "SetBatteryState()",
        "body": "SetBatteryState($1)$0",
        "description": "void SetBatteryState (byte state)"
    },
    "SetBluetoothState":{
        "prefix": "SetBluetoothState()",
        "body": "SetBluetoothState($1)$0",
        "description": "void SetBluetoothState (byte state)"
    },
    "SetSleepTimeout":{
        "prefix": "SetSleepTimeout()",
        "body": "SetSleepTimeout($1)$0",
        "description": "void SetSleepTimeout (const byte n)"
    },
    "SetSleepTime":{
        "prefix": "SetSleepTime()",
        "body": "SetSleepTime($1)$0",
        "description": "void SetSleepTime (const byte n)"
    },
    "SetSleepTimer":{
        "prefix": "SetSleepTimer()",
        "body": "SetSleepTimer($1)$0",
        "description": "void SetSleepTimer (const byte n)"
    },
    "SetVolume":{
        "prefix": "SetVolume()",
        "body": "SetVolume($1)$0",
        "description": "void SetVolume (byte volume)"
    },
    "SetOnBrickProgramPointer":{
        "prefix": "SetOnBrickProgramPointer()",
        "body": "SetOnBrickProgramPointer($1)$0",
        "description": "void SetOnBrickProgramPointer (byte obpStep)"
    },
    "ForceOff":{
        "prefix": "ForceOff()",
        "body": "ForceOff($1)$0",
        "description": "void ForceOff (byte num)"
    },
    "SetAbortFlag":{
        "prefix": "SetAbortFlag()",
        "body": "SetAbortFlag($1)$0",
        "description": "void SetAbortFlag (byte abortFlag)"
    },
    "SetLongAbort":{
        "prefix": "SetLongAbort()",
        "body": "SetLongAbort($1)$0",
        "description": "void SetLongAbort (bool longAbort)"
    },
    "SysSetSleepTimeout":{
        "prefix": "SysSetSleepTimeout()",
        "body": "SysSetSleepTimeout($1)$0",
        "description": "void SysSetSleepTimeout (SetSleepTimeoutType &args)"
    },
    "FreeMemory":{
        "prefix": "FreeMemory()",
        "body": "FreeMemory($1)$0",
        "description": "unsigned int FreeMemory (void)"
    },
    "CreateFile":{
        "prefix": "CreateFile()",
        "body": "CreateFile($1)$0",
        "description": "unsigned int CreateFile (string fname, unsigned int fsize, byte &handle)"
    },
    "OpenFileAppend":{
        "prefix": "OpenFileAppend()",
        "body": "OpenFileAppend($1)$0",
        "description": "unsigned int OpenFileAppend (string fname, unsigned int &fsize, byte &handle)"
    },
    "OpenFileRead":{
        "prefix": "OpenFileRead()",
        "body": "OpenFileRead($1)$0",
        "description": "unsigned int OpenFileRead (string fname, unsigned int &fsize, byte &handle)"
    },
    "CloseFile":{
        "prefix": "CloseFile()",
        "body": "CloseFile($1)$0",
        "description": "unsigned int CloseFile (byte handle)"
    },
    "ResolveHandle":{
        "prefix": "ResolveHandle()",
        "body": "ResolveHandle($1)$0",
        "description": "unsigned int ResolveHandle (string filename, byte &handle, bool &writeable)"
    },
    "RenameFile":{
        "prefix": "RenameFile()",
        "body": "RenameFile($1)$0",
        "description": "unsigned int RenameFile (string oldname, string newname)"
    },
    "DeleteFile":{
        "prefix": "DeleteFile()",
        "body": "DeleteFile($1)$0",
        "description": "unsigned int DeleteFile (string fname)"
    },
    "ResizeFile":{
        "prefix": "ResizeFile()",
        "body": "ResizeFile($1)$0",
        "description": "unsigned int ResizeFile (string fname, const unsigned int newsize)"
    },
    "CreateFileLinear":{
        "prefix": "CreateFileLinear()",
        "body": "CreateFileLinear($1)$0",
        "description": "unsigned int CreateFileLinear (string fname, unsigned int fsize, byte &handle)"
    },
    "CreateFileNonLinear":{
        "prefix": "CreateFileNonLinear()",
        "body": "CreateFileNonLinear($1)$0",
        "description": "unsigned int CreateFileNonLinear (string fname, unsigned int fsize, byte &handle)"
    },
    "OpenFileReadLinear":{
        "prefix": "OpenFileReadLinear()",
        "body": "OpenFileReadLinear($1)$0",
        "description": "unsigned int OpenFileReadLinear (string fname, unsigned int &fsize, byte &handle)"
    },
    "FindFirstFile":{
        "prefix": "FindFirstFile()",
        "body": "FindFirstFile($1)$0",
        "description": "unsigned int FindFirstFile (string &fname, byte &handle)"
    },
    "FindNextFile":{
        "prefix": "FindNextFile()",
        "body": "FindNextFile($1)$0",
        "description": "unsigned int FindNextFile (string &fname, byte &handle)"
    },
    "SizeOf":{
        "prefix": "SizeOf()",
        "body": "SizeOf($1)$0",
        "description": "unsigned int SizeOf (variant &value)"
    },
    "Read":{
        "prefix": "Read()",
        "body": "Read($1)$0",
        "description": "unsigned int Read (byte handle, variant &value)"
    },
    "ReadLn":{
        "prefix": "ReadLn()",
        "body": "ReadLn($1)$0",
        "description": "unsigned int ReadLn (byte handle, variant &value)"
    },
    "ReadBytes":{
        "prefix": "ReadBytes()",
        "body": "ReadBytes($1)$0",
        "description": "unsigned int ReadBytes (byte handle, unsigned int &length, byte &buf[])"
    },
    "ReadLnString":{
        "prefix": "ReadLnString()",
        "body": "ReadLnString($1)$0",
        "description": "unsigned int ReadLnString (byte handle, string &output)"
    },
    "Write":{
        "prefix": "Write()",
        "body": "Write($1)$0",
        "description": "unsigned int Write (byte handle, const variant &value)"
    },
    "WriteBytes":{
        "prefix": "WriteBytes()",
        "body": "WriteBytes($1)$0",
        "description": "unsigned int WriteBytes (byte handle, const byte &buf[], unsigned int &cnt)"
    },
    "WriteBytesEx":{
        "prefix": "WriteBytesEx()",
        "body": "WriteBytesEx($1)$0",
        "description": "unsignedint WriteBytesEx (byte handle, unsigned int &len, const byte &buf[])"
    },
    "WriteLn":{
        "prefix": "WriteLn()",
        "body": "WriteLn($1)$0",
        "description": "unsigned int WriteLn (byte handle, const variant &value)"
    },
    "WriteLnString":{
        "prefix": "WriteLnString()",
        "body": "WriteLnString($1)$0",
        "description": "unsigned int WriteLnString (byte handle, const string &str, unsigned int &cnt)"
    },
    "WriteString":{
        "prefix": "WriteString()",
        "body": "WriteString($1)$0",
        "description": "unsigned int WriteString (byte handle, const string &str, unsigned int &cnt)"
    },
    "SysFileOpenRead":{
        "prefix": "SysFileOpenRead()",
        "body": "SysFileOpenRead($1)$0",
        "description": "void SysFileOpenRead (FileOpenType &args)"
    },
    "SysFileOpenWrite":{
        "prefix": "SysFileOpenWrite()",
        "body": "SysFileOpenWrite($1)$0",
        "description": "void SysFileOpenWrite (FileOpenType &args)"
    },
    "SysFileOpenAppend":{
        "prefix": "SysFileOpenAppend()",
        "body": "SysFileOpenAppend($1)$0",
        "description": "void SysFileOpenAppend (FileOpenType &args)"
    },
    "SysFileRead":{
        "prefix": "SysFileRead()",
        "body": "SysFileRead($1)$0",
        "description": "void SysFileRead (FileReadWriteType &args)"
    },
    "SysFileWrite":{
        "prefix": "SysFileWrite()",
        "body": "SysFileWrite($1)$0",
        "description": "void SysFileWrite (FileReadWriteType &args)"
    },
    "SysFileClose":{
        "prefix": "SysFileClose()",
        "body": "SysFileClose($1)$0",
        "description": "void SysFileClose (FileCloseType &args)"
    },
    "SysFileResolveHandle":{
        "prefix": "SysFileResolveHandle()",
        "body": "SysFileResolveHandle($1)$0",
        "description": "void SysFileResolveHandle (FileResolveHandleType &args)"
    },
    "SysFileRename":{
        "prefix": "SysFileRename()",
        "body": "SysFileRename($1)$0",
        "description": "void SysFileRename (FileRenameType &args)"
    },
    "SysFileDelete":{
        "prefix": "SysFileDelete()",
        "body": "SysFileDelete($1)$0",
        "description": "void SysFileDelete (FileDeleteType &args)"
    },
    "SysLoaderExecuteFunction":{
        "prefix": "SysLoaderExecuteFunction()",
        "body": "SysLoaderExecuteFunction($1)$0",
        "description": "void SysLoaderExecuteFunction (LoaderExecuteFunctionType &args)"
    },
    "SysFileFindFirst":{
        "prefix": "SysFileFindFirst()",
        "body": "SysFileFindFirst($1)$0",
        "description": "void SysFileFindFirst (FileFindType &args)"
    },
    "SysFileFindNext":{
        "prefix": "SysFileFindNext()",
        "body": "SysFileFindNext($1)$0",
        "description": "void SysFileFindNext (FileFindType &args)"
    },
    "SysFileOpenWriteLinear":{
        "prefix": "SysFileOpenWriteLinear()",
        "body": "SysFileOpenWriteLinear($1)$0",
        "description": "void SysFileOpenWriteLinear (FileOpenType &args)"
    },
    "SysFileOpenWriteNonLinear":{
        "prefix": "SysFileOpenWriteNonLinear()",
        "body": "SysFileOpenWriteNonLinear($1)$0",
        "description": "void SysFileOpenWriteNonLinear (FileOpenType &args)"
    },
    "SysFileOpenReadLinear":{
        "prefix": "SysFileOpenReadLinear()",
        "body": "SysFileOpenReadLinear($1)$0",
        "description": "void SysFileOpenReadLinear (FileOpenType &args)"
    },
    "SysFileSeek":{
        "prefix": "SysFileSeek()",
        "body": "SysFileSeek($1)$0",
        "description": "void SysFileSeek (FileSeekType &args)"
    },
    "SysFileResize":{
        "prefix": "SysFileResize()",
        "body": "SysFileResize($1)$0",
        "description": "void SysFileResize (FileResizeType &args)"
    },
    "SysFileTell":{
        "prefix": "SysFileTell()",
        "body": "SysFileTell($1)$0",
        "description": "void SysFileTell (FileTellType &args)"
    },
    "SysListFiles":{
        "prefix": "SysListFiles()",
        "body": "SysListFiles($1)$0",
        "description": "void SysListFiles (ListFilesType &args)"
    },
    "S1":{"prefix":"S1","body":"S1","description":"#define S1 0"},
    "S2":{"prefix":"S2","body":"S2","description":"#define S2 1"},
    "S3":{"prefix":"S3","body":"S3","description":"#define S3 2"},
    "S4":{"prefix":"S4","body":"S4","description":"#define S4 3"},
    "IN_1":{"prefix": "IN_1", "body": "IN_1", "description": "#define IN_1 0x00"},
    "IN_2":{"prefix": "IN_2", "body": "IN_2", "description": "#define IN_2 0x01"},
    "IN_3":{"prefix": "IN_3", "body": "IN_3", "description": "#define IN_3 0x02"},
    "IN_4":{"prefix": "IN_4", "body": "IN_4", "description": "#define IN_4 0x03"},
    "SENSOR_1":{"prefix": "SENSOR_1", "body": "SENSOR_1", "description": "#define SENSOR_1 Sensor(S1)"},
    "SENSOR_2":{"prefix": "SENSOR_2", "body": "SENSOR_2", "description": "#define SENSOR_2 Sensor(S2)"},
    "SENSOR_3":{"prefix": "SENSOR_3", "body": "SENSOR_3", "description": "#define SENSOR_3 Sensor(S3)"},
    "SENSOR_4":{"prefix": "SENSOR_4", "body": "SENSOR_4", "description": "#define SENSOR_4 Sensor(S4)"},
    "INPUT_RED":{"prefix": "INPUT_RED", "body": "INPUT_RED", "description": "#define INPUT_RED 0"},
    "INPUT_GREEN":{"prefix": "INPUT_GREEN", "body": "INPUT_GREEN", "description": "#define INPUT_GREEN 1"},
    "INPUT_BLUE":{"prefix": "INPUT_BLUE", "body": "INPUT_BLUE", "description": "#define INPUT_BLUE 2"},
    "INPUT_BLANK":{"prefix": "INPUT_BLANK", "body": "INPUT_BLANK", "description": "#define INPUT_BLANK 3"},
    "INPUT_NO_OF_COLORS":{"prefix": "INPUT_NO_OF_COLORS", "body": "INPUT_NO_OF_COLORS", "description": "#define INPUT_NO_OF_COLORS 4"},
    "INPUT_BLACKCOLOR":{"prefix": "INPUT_BLACKCOLOR", "body": "INPUT_BLACKCOLOR", "description": "#define INPUT_BLACKCOLOR 1"},
    "INPUT_BLUECOLOR":{"prefix": "INPUT_BLUECOLOR", "body": "INPUT_BLUECOLOR", "description": "#define INPUT_BLUECOLOR 2"},
    "INPUT_GREENCOLOR":{"prefix": "INPUT_GREENCOLOR", "body": "INPUT_GREENCOLOR", "description": "#define INPUT_GREENCOLOR 3"},
    "INPUT_YELLOWCOLOR":{"prefix": "INPUT_YELLOWCOLOR", "body": "INPUT_YELLOWCOLOR", "description": "#define INPUT_YELLOWCOLOR 4"},
    "INPUT_REDCOLOR":{"prefix": "INPUT_REDCOLOR", "body": "INPUT_REDCOLOR", "description": "#define INPUT_REDCOLOR 5"},
    "INPUT_WHITECOLOR":{"prefix": "INPUT_WHITECOLOR", "body": "INPUT_WHITECOLOR", "description": "#define INPUT_WHITECOLOR 6"},
    "INPUT_CUSTOMINACTIVE":{"prefix": "INPUT_CUSTOMINACTIVE", "body": "INPUT_CUSTOMINACTIVE", "description": "#define INPUT_CUSTOMINACTIVE 0x00"},
    "INPUT_CUSTOM9V":{"prefix": "INPUT_CUSTOM9V", "body": "INPUT_CUSTOM9V", "description": "#define INPUT_CUSTOM9V 0x01"},
    "INPUT_CUSTOMACTIVE":{"prefix": "INPUT_CUSTOMACTIVE", "body": "INPUT_CUSTOMACTIVE", "description": "#define INPUT_CUSTOMACTIVE 0x02"},
    "INPUT_INVALID_DATA":{"prefix": "INPUT_INVALID_DATA", "body": "INPUT_INVALID_DATA", "description": "#define INPUT_INVALID_DATA 0x01"},
    "SENSOR_TYPE_NONE":{"prefix":"SENSOR_TYPE_NONE","body":"SENSOR_TYPE_NONE","description":"#define SENSOR_TYPE_NONE IN_TYPE_NO_SENSOR"},
    "SENSOR_TYPE_TOUCH":{"prefix":"SENSOR_TYPE_TOUCH","body":"SENSOR_TYPE_TOUCH","description":"#define SENSOR_TYPE_TOUCH IN_TYPE_SWITCH"},
    "SENSOR_TYPE_TEMPERATURE":{"prefix":"SENSOR_TYPE_TEMPERATURE","body":"SENSOR_TYPE_TEMPERATURE","description":"#define SENSOR_TYPE_TEMPERATURE IN_TYPE_TEMPERATURE"},
    "SENSOR_TYPE_LIGHT":{"prefix":"SENSOR_TYPE_LIGHT","body":"SENSOR_TYPE_LIGHT","description":"#define SENSOR_TYPE_LIGHT IN_TYPE_REFLECTION"},
    "SENSOR_TYPE_ROTATION":{"prefix":"SENSOR_TYPE_ROTATION","body":"SENSOR_TYPE_ROTATION","description":"#define SENSOR_TYPE_ROTATION IN_TYPE_ANGLE"},
    "SENSOR_TYPE_LIGHT_ACTIVE":{"prefix":"SENSOR_TYPE_LIGHT_ACTIVE","body":"SENSOR_TYPE_LIGHT_ACTIVE","description":"#define SENSOR_TYPE_LIGHT_ACTIVE IN_TYPE_LIGHT_ACTIVE"},
    "SENSOR_TYPE_LIGHT_INACTIVE":{"prefix":"SENSOR_TYPE_LIGHT_INACTIVE","body":"SENSOR_TYPE_LIGHT_INACTIVE","description":"#define SENSOR_TYPE_LIGHT_INACTIVE IN_TYPE_LIGHT_INACTIVE"},
    "SENSOR_TYPE_SOUND_DB":{"prefix":"SENSOR_TYPE_SOUND_DB","body":"SENSOR_TYPE_SOUND_DB","description":"#define SENSOR_TYPE_SOUND_DB IN_TYPE_SOUND_DB"},
    "SENSOR_TYPE_SOUND_DBA":{"prefix":"SENSOR_TYPE_SOUND_DBA","body":"SENSOR_TYPE_SOUND_DBA","description":"#define SENSOR_TYPE_SOUND_DBA IN_TYPE_SOUND_DBA"},
    "SENSOR_TYPE_CUSTOM":{"prefix":"SENSOR_TYPE_CUSTOM","body":"SENSOR_TYPE_CUSTOM","description":"#define SENSOR_TYPE_CUSTOM IN_TYPE_CUSTOM"},
    "SENSOR_TYPE_LOWSPEED":{"prefix":"SENSOR_TYPE_LOWSPEED","body":"SENSOR_TYPE_LOWSPEED","description":"#define SENSOR_TYPE_LOWSPEED IN_TYPE_LOWSPEED"},
    "SENSOR_TYPE_LOWSPEED_9V":{"prefix":"SENSOR_TYPE_LOWSPEED_9V","body":"SENSOR_TYPE_LOWSPEED_9V","description":"#define SENSOR_TYPE_LOWSPEED_9V IN_TYPE_LOWSPEED_9V"},
    "SENSOR_TYPE_HIGHSPEED":{"prefix":"SENSOR_TYPE_HIGHSPEED","body":"SENSOR_TYPE_HIGHSPEED","description":"#define SENSOR_TYPE_HIGHSPEED IN_TYPE_HISPEED"},
    "SENSOR_TYPE_COLORFULL":{"prefix":"SENSOR_TYPE_COLORFULL","body":"SENSOR_TYPE_COLORFULL","description":"#define SENSOR_TYPE_COLORFULL IN_TYPE_COLORFULL"},
    "SENSOR_TYPE_COLORRED":{"prefix":"SENSOR_TYPE_COLORRED","body":"SENSOR_TYPE_COLORRED","description":"#define SENSOR_TYPE_COLORRED IN_TYPE_COLORRED"},
    "SENSOR_TYPE_COLORGREEN":{"prefix":"SENSOR_TYPE_COLORGREEN","body":"SENSOR_TYPE_COLORGREEN","description":"#define SENSOR_TYPE_COLORGREEN IN_TYPE_COLORGREEN"},
    "SENSOR_TYPE_COLORBLUE":{"prefix":"SENSOR_TYPE_COLORBLUE","body":"SENSOR_TYPE_COLORBLUE","description":"#define SENSOR_TYPE_COLORBLUE IN_TYPE_COLORBLUE"},
    "SENSOR_TYPE_COLORNONE":{"prefix":"SENSOR_TYPE_COLORNONE","body":"SENSOR_TYPE_COLORNONE","description":"#define SENSOR_TYPE_COLORNONE IN_TYPE_COLORNONE"},
    "SENSOR_MODE_RAW":{"prefix":"SENSOR_MODE_RAW","body":"SENSOR_MODE_RAW","description":"define SENSOR_MODE_RAW IN_MODE_RAW"},
    "SENSOR_MODE_BOOL":{"prefix":"SENSOR_MODE_BOOL","body":"SENSOR_MODE_BOOL","description":"define SENSOR_MODE_BOOL IN_MODE_BOOLEAN"},
    "SENSOR_MODE_EDGE":{"prefix":"SENSOR_MODE_EDGE","body":"SENSOR_MODE_EDGE","description":"define SENSOR_MODE_EDGE IN_MODE_TRANSITIONCNT"},
    "SENSOR_MODE_PULSE":{"prefix":"SENSOR_MODE_PULSE","body":"SENSOR_MODE_PULSE","description":"define SENSOR_MODE_PULSE IN_MODE_PERIODCOUNTER"},
    "SENSOR_MODE_PERCENT":{"prefix":"SENSOR_MODE_PERCENT","body":"SENSOR_MODE_PERCENT","description":"define SENSOR_MODE_PERCENT IN_MODE_PCTFULLSCALE"},
    "SENSOR_MODE_CELSIUS":{"prefix":"SENSOR_MODE_CELSIUS","body":"SENSOR_MODE_CELSIUS","description":"define SENSOR_MODE_CELSIUS IN_MODE_CELSIUS"},
    "SENSOR_MODE_FAHRENHEIT":{"prefix":"SENSOR_MODE_FAHRENHEIT","body":"SENSOR_MODE_FAHRENHEIT","description":"define SENSOR_MODE_FAHRENHEIT IN_MODE_FAHRENHEIT"},
    "SENSOR_MODE_ROTATION":{"prefix":"SENSOR_MODE_ROTATION","body":"SENSOR_MODE_ROTATION","description":"define SENSOR_MODE_ROTATION IN_MODE_ANGLESTEP"},
    "_SENSOR_CFG":{"prefix":"_SENSOR_CFG","body":"_SENSOR_CFG","description":"#define _SENSOR_CFG(_type, _mode) (((_type)<<8)+(_mode))"},
    "SENSOR_TOUCH":{"prefix":"SENSOR_TOUCH","body":"SENSOR_TOUCH","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_BOOL)"},
    "SENSOR_LIGHT":{"prefix":"SENSOR_LIGHT","body":"SENSOR_LIGHT","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT,SENSOR_MODE_PERCENT)"},
    "SENSOR_ROTATION":{"prefix":"SENSOR_ROTATION","body":"SENSOR_ROTATION","description":"_SENSOR_CFG(SENSOR_TYPE_ROTATION,SENSOR_MODE_ROTATION)"},
    "SENSOR_CELCIUS":{"prefix":"SENSOR_CELCIUS","body":"SENSOR_CELCIUS","description":"_SENSOR_CFG(SENSOR_TYPE_TEMPERATURE,SENSOR_MODE_CELCIUS)"},
    "SENSOR_FAHRENHEIT":{"prefix":"SENSOR_FAHRENHEIT","body":"SENSOR_FAHRENHEIT","description":"_SENSOR_CFG(SENSOR_TYPE_TEMPERATURE,SENSOR_MODE_FAHRENHEIT)"},
    "SENSOR_PULSE":{"prefix":"SENSOR_PULSE","body":"SENSOR_PULSE","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_PULSE)"},
    "SENSOR_EDGE":{"prefix":"SENSOR_EDGE","body":"SENSOR_EDGE","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_EDGE)"},
    "SENSOR_NXTLIGHT":{"prefix":"SENSOR_NXTLIGHT","body":"SENSOR_NXTLIGHT","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT_ACTIVE,SENSOR_MODE_PERCENT)"},
    "SENSOR_SOUND":{"prefix":"SENSOR_SOUND","body":"SENSOR_SOUND","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT_SOUND,SENSOR_MODE_PERCENT)"},
    "OUT_A":{"prefix":"OUT_A","body":"OUT_A","description":"#define OUT_A 0x00"},
    "OUT_B":{"prefix":"OUT_B","body":"OUT_B","description":"#define OUT_B 0x01"},
    "OUT_C":{"prefix":"OUT_C","body":"OUT_C","description":"#define OUT_C 0x02"},
    "OUT_AB":{"prefix":"OUT_AB","body":"OUT_AB","description":"#define OUT_AB 0x03"},
    "OUT_AC":{"prefix":"OUT_AC","body":"OUT_AC","description":"#define OUT_AC 0x04"},
    "OUT_BC":{"prefix":"OUT_BC","body":"OUT_BC","description":"#define OUT_BC 0x05"},
    "OUT_ABC":{"prefix":"OUT_ABC","body":"OUT_ABC","description":"#define OUT_ABC 0x06"},
    "PID_0":{"prefix": "PID_0", "body": "PID_0", "description": "#define PID_0 0"},
    "PID_1":{"prefix": "PID_1", "body": "PID_1", "description": "#define PID_1 32"},
    "PID_2":{"prefix": "PID_2", "body": "PID_2", "description": "#define PID_2 64"},
    "PID_3":{"prefix": "PID_3", "body": "PID_3", "description": "#define PID_3 96"},
    "PID_4":{"prefix": "PID_4", "body": "PID_4", "description": "#define PID_4 128"},
    "PID_5":{"prefix": "PID_5", "body": "PID_5", "description": "#define PID_5 160"},
    "PID_6":{"prefix": "PID_6", "body": "PID_6", "description": "#define PID_6 192"},
    "PID_7":{"prefix": "PID_7", "body": "PID_7", "description": "#define PID_7 224"},
    "OUT_MODE_COAST":{"prefix":"OUT_MODE_COAST","body":"OUT_MODE_COAST","description":"#define OUT_MODE_COAST 0x00"},
    "OUT_MODE_MOTORON":{"prefix":"OUT_MODE_MOTORON","body":"OUT_MODE_MOTORON","description":"#define OUT_MODE_MOTORON 0x01"},
    "OUT_MODE_BRAKE":{"prefix":"OUT_MODE_BRAKE","body":"OUT_MODE_BRAKE","description":"#define OUT_MODE_BRAKE 0x02"},
    "OUT_MODE_REGULATED":{"prefix":"OUT_MODE_REGULATED","body":"OUT_MODE_REGULATED","description":"#define OUT_MODE_REGULATED 0x04"},
    "OUT_MODE_REGMETHOD":{"prefix":"OUT_MODE_REGMETHOD","body":"OUT_MODE_REGMETHOD","description":"#define OUT_MODE_REGMETHOD 0xF0"},
    "OUT_OPTION_HOLDATLIMIT":{"prefix": "OUT_OPTION_HOLDATLIMIT","body": "OUT_OPTION_HOLDATLIMIT","description": "#define OUT_OPTION_HOLDATLIMIT 0x10"},
    "OUT_OPTION_RAMPDOWNTOLIMIT":{"prefix": "OUT_OPTION_RAMPDOWNTOLIMIT","body": "OUT_OPTION_RAMPDOWNTOLIMIT","description": "#define OUT_OPTION_RAMPDOWNTOLIMIT 0x20"},
    "OUT_REGOPTION_NO_SATURATION":{"prefix": "OUT_REGOPTION_NO_SATURATION","body": "OUT_REGOPTION_NO_SATURATION","description": "#define OUT_REGOPTION_NO_SATURATION 0x01"},
    "OUT_RUNSTATE_IDLE":{"prefix": "OUT_RUNSTATE_IDLE","body": "OUT_RUNSTATE_IDLE","description": "#define OUT_RUNSTATE_IDLE 0x00"},
    "OUT_RUNSTATE_RAMPUP":{"prefix": "OUT_RUNSTATE_RAMPUP","body": "OUT_RUNSTATE_RAMPUP","description": "#define OUT_RUNSTATE_RAMPUP 0x10"},
    "OUT_RUNSTATE_RUNNING":{"prefix": "OUT_RUNSTATE_RUNNING","body": "OUT_RUNSTATE_RUNNING","description": "#define OUT_RUNSTATE_RUNNING 0x20"},
    "OUT_RUNSTATE_RAMPDOWN":{"prefix": "OUT_RUNSTATE_RAMPDOWN","body": "OUT_RUNSTATE_RAMPDOWN","description": "#define OUT_RUNSTATE_RAMPDOWN 0x40"},
    "OUT_RUNSTATE_HOLD":{"prefix": "OUT_RUNSTATE_HOLD","body": "OUT_RUNSTATE_HOLD","description": "#define OUT_RUNSTATE_HOLD 0x60"},
    "OUT_REGMODE_IDLE":{"prefix": "OUT_REGMODE_IDLE","body": "OUT_REGMODE_IDLE","description": "#define OUT_REGMODE_IDLE 0"},
    "OUT_REGMODE_SPEED":{"prefix": "OUT_REGMODE_SPEED","body": "OUT_REGMODE_SPEED","description": "#define OUT_REGMODE_SPEED 1"},
    "OUT_REGMODE_SYNC":{"prefix": "OUT_REGMODE_SYNC","body": "OUT_REGMODE_SYNC","description": "#define OUT_REGMODE_SYNC 2"},
    "OUT_REGMODE_POS":{"prefix": "OUT_REGMODE_POS","body": "OUT_REGMODE_POS","description": "#define OUT_REGMODE_POS 4"},
    "UF_UPDATE_MODE":{"prefix": "UF_UPDATE_MODE","body": "UF_UPDATE_MODE","description": "#define UF_UPDATE_MODE 0x01"},
    "UF_UPDATE_SPEED":{"prefix": "UF_UPDATE_SPEED","body": "UF_UPDATE_SPEED","description": "#define UF_UPDATE_SPEED 0x02"},
    "UF_UPDATE_TACHO_LIMIT":{"prefix": "UF_UPDATE_TACHO_LIMIT","body": "UF_UPDATE_TACHO_LIMIT","description": "#define UF_UPDATE_TACHO_LIMIT 0x04"},
    "UF_UPDATE_RESET_COUNT":{"prefix": "UF_UPDATE_RESET_COUNT","body": "UF_UPDATE_RESET_COUNT","description": "#define UF_UPDATE_RESET_COUNT 0x08"},
    "UF_UPDATE_PID_VALUES":{"prefix": "UF_UPDATE_PID_VALUES","body": "UF_UPDATE_PID_VALUES","description": "#define UF_UPDATE_PID_VALUES 0x10"},
    "UF_UPDATE_RESET_BLOCK_COUNT":{"prefix": "UF_UPDATE_RESET_BLOCK_COUNT","body": "UF_UPDATE_RESET_BLOCK_COUNT","description": "#define UF_UPDATE_RESET_BLOCK_COUNT 0x20"},
    "UF_UPDATE_RESET_ROTATION_COUNT":{"prefix": "UF_UPDATE_RESET_ROTATION_COUNT","body": "UF_UPDATE_RESET_ROTATION_COUNT","description": "#define UF_UPDATE_RESET_ROTATION_COUNT 0x40"},
    "UF_PENDING_UPDATES":{"prefix": "UF_PENDING_UPDATES","body": "UF_PENDING_UPDATES","description": "#define UF_PENDING_UPDATES 0x80"},
    "RESET_NONE":{"prefix": "RESET_NONE", "body": "RESET_NONE", "description": "#define RESET_NONE 0x00"},
    "RESET_COUNT":{"prefix": "RESET_COUNT", "body": "RESET_COUNT", "description": "#define RESET_COUNT 0x08"},
    "RESET_BLOCK_COUNT":{"prefix": "RESET_BLOCK_COUNT", "body": "RESET_BLOCK_COUNT", "description": "#define RESET_BLOCK_COUNT 0x20"},
    "RESET_ROTATION_COUNT":{"prefix": "RESET_ROTATION_COUNT", "body": "RESET_ROTATION_COUNT", "description": "#define RESET_ROTATION_COUNT 0x40"},
    "RESET_BLOCKANDTACHO":{"prefix": "RESET_BLOCKANDTACHO", "body": "RESET_BLOCKANDTACHO", "description": "#define RESET_BLOCKANDTACHO 0x28"},
    "RESET_ALL":{"prefix": "RESET_ALL", "body": "RESET_ALL", "description": "#define RESET_ALL 0x68"},
    "LCD_LINE8":{"prefix": "LCD_LINE8", "body": "LCD_LINE8", "description": "#define LCD_LINE8 0"},
    "LCD_LINE7":{"prefix": "LCD_LINE7", "body": "LCD_LINE7", "description": "#define LCD_LINE7 8"},
    "LCD_LINE6":{"prefix": "LCD_LINE6", "body": "LCD_LINE6", "description": "#define LCD_LINE6 16"},
    "LCD_LINE5":{"prefix": "LCD_LINE5", "body": "LCD_LINE5", "description": "#define LCD_LINE5 24"},
    "LCD_LINE4":{"prefix": "LCD_LINE4", "body": "LCD_LINE4", "description": "#define LCD_LINE4 32"},
    "LCD_LINE3":{"prefix": "LCD_LINE3", "body": "LCD_LINE3", "description": "#define LCD_LINE3 40"},
    "LCD_LINE2":{"prefix": "LCD_LINE2", "body": "LCD_LINE2", "description": "#define LCD_LINE2 48"},
    "LCD_LINE1":{"prefix": "LCD_LINE1", "body": "LCD_LINE1", "description": "#define LCD_LINE1 56"},
    "DISPLAY_ERASE_ALL":{"prefix": "DISPLAY_ERASE_ALL", "body": "DISPLAY_ERASE_ALL", "description": "#define DISPLAY_ERASE_ALL 0x00"},
    "DISPLAY_PIXEL":{"prefix": "DISPLAY_PIXEL", "body": "DISPLAY_PIXEL", "description": "#define DISPLAY_PIXEL 0x01"},
    "DISPLAY_HORIZONTAL_LINE":{"prefix": "DISPLAY_HORIZONTAL_LINE", "body": "DISPLAY_HORIZONTAL_LINE", "description": "#define DISPLAY_HORIZONTAL_LINE 0x02"},
    "DISPLAY_VERTICAL_LINE":{"prefix": "DISPLAY_VERTICAL_LINE", "body": "DISPLAY_VERTICAL_LINE", "description": "#define DISPLAY_VERTICAL_LINE 0x03"},
    "DISPLAY_CHAR":{"prefix": "DISPLAY_CHAR", "body": "DISPLAY_CHAR", "description": "#define DISPLAY_CHAR 0x04"},
    "DISPLAY_ERASE_LINE":{"prefix": "DISPLAY_ERASE_LINE", "body": "DISPLAY_ERASE_LINE", "description": "#define DISPLAY_ERASE_LINE 0x05"},
    "DISPLAY_FILL_REGION":{"prefix": "DISPLAY_FILL_REGION", "body": "DISPLAY_FILL_REGION", "description": "#define DISPLAY_FILL_REGION 0x06"},
    "DISPLAY_FRAME":{"prefix": "DISPLAY_FRAME", "body": "DISPLAY_FRAME", "description": "#define DISPLAY_FRAME 0x07"},
    "DRAW_OPT_CLEAR_WHOLE_SCREEN":{"prefix": "DRAW_OPT_CLEAR_WHOLE_SCREEN", "body": "DRAW_OPT_CLEAR_WHOLE_SCREEN", "description": "#define DRAW_OPT_CLEAR_WHOLE_SCREEN (0x0001)"},
    "DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN":{"prefix": "DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN", "body": "DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN", "description": "#define DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN (0x0002)"},
    "DRAW_OPT_CLEAR_PIXELS":{"prefix": "DRAW_OPT_CLEAR_PIXELS", "body": "DRAW_OPT_CLEAR_PIXELS", "description": "#define DRAW_OPT_CLEAR_PIXELS (0x0004)"},
    "DRAW_OPT_CLEAR":{"prefix": "DRAW_OPT_CLEAR", "body": "DRAW_OPT_CLEAR", "description": "#define DRAW_OPT_CLEAR (0x0004)"},
    "DRAW_OPT_INVERT":{"prefix": "DRAW_OPT_INVERT", "body": "DRAW_OPT_INVERT", "description": "#define DRAW_OPT_INVERT (0x0004)"},
    "DRAW_OPT_LOGICAL_COPY":{"prefix": "DRAW_OPT_LOGICAL_COPY", "body": "DRAW_OPT_LOGICAL_COPY", "description": "#define DRAW_OPT_LOGICAL_COPY (0x0000)"},
    "DRAW_OPT_LOGICAL_AND":{"prefix": "DRAW_OPT_LOGICAL_AND", "body": "DRAW_OPT_LOGICAL_AND", "description": "#define DRAW_OPT_LOGICAL_AND (0x0008)"},
    "DRAW_OPT_LOGICAL_OR":{"prefix": "DRAW_OPT_LOGICAL_OR", "body": "DRAW_OPT_LOGICAL_OR", "description": "#define DRAW_OPT_LOGICAL_OR (0x0010)"},
    "DRAW_OPT_LOGICAL_XOR":{"prefix": "DRAW_OPT_LOGICAL_XOR", "body": "DRAW_OPT_LOGICAL_XOR", "description": "#define DRAW_OPT_LOGICAL_XOR (0x0018)"},
    "DRAW_OPT_FILL_SHAPE":{"prefix": "DRAW_OPT_FILL_SHAPE", "body": "DRAW_OPT_FILL_SHAPE", "description": "#define DRAW_OPT_FILL_SHAPE (0x0020)"},
    "DRAW_OPT_CLEAR_SCREEN_MODES":{"prefix": "DRAW_OPT_CLEAR_SCREEN_MODES", "body": "DRAW_OPT_CLEAR_SCREEN_MODES", "description": "#define DRAW_OPT_CLEAR_SCREEN_MODES (0x0003)"},
    "DRAW_OPT_LOGICAL_OPERATIONS":{"prefix": "DRAW_OPT_LOGICAL_OPERATIONS", "body": "DRAW_OPT_LOGICAL_OPERATIONS", "description": "#define DRAW_OPT_LOGICAL_OPERATIONS (0x0018)"},
    "DRAW_OPT_POLYGON_POLYLINE":{"prefix": "DRAW_OPT_POLYGON_POLYLINE", "body": "DRAW_OPT_POLYGON_POLYLINE", "description": "#define DRAW_OPT_POLYGON_POLYLINE (0x0400)"},
    "TEXTLINE_1":{"prefix": "TEXTLINE_1", "body": "TEXTLINE_1", "description": "#define TEXTLINE_1 0"},
    "TEXTLINE_2":{"prefix": "TEXTLINE_2", "body": "TEXTLINE_2", "description": "#define TEXTLINE_2 1"},
    "TEXTLINE_3":{"prefix": "TEXTLINE_3", "body": "TEXTLINE_3", "description": "#define TEXTLINE_3 2"},
    "TEXTLINE_4":{"prefix": "TEXTLINE_4", "body": "TEXTLINE_4", "description": "#define TEXTLINE_4 3"},
    "TEXTLINE_5":{"prefix": "TEXTLINE_5", "body": "TEXTLINE_5", "description": "#define TEXTLINE_5 4"},
    "TEXTLINE_6":{"prefix": "TEXTLINE_6", "body": "TEXTLINE_6", "description": "#define TEXTLINE_6 5"},
    "TEXTLINE_7":{"prefix": "TEXTLINE_7", "body": "TEXTLINE_7", "description": "#define TEXTLINE_7 6"},
    "TEXTLINE_8":{"prefix": "TEXTLINE_8", "body": "TEXTLINE_8", "description": "#define TEXTLINE_8 7"},
    "TEXTLINES":{"prefix": "TEXTLINES", "body": "TEXTLINES", "description": "#define TEXTLINES 8"},
    "TONE_A3":{"prefix": "TONE_A3", "body": "TONE_A3", "description": "#define TONE_A3 220"},
    "TONE_AS3":{"prefix": "TONE_AS3", "body": "TONE_AS3", "description": "#define TONE_AS3 233"},
    "TONE_B3":{"prefix": "TONE_B3", "body": "TONE_B3", "description": "#define TONE_B3 247"},
    "TONE_C4":{"prefix": "TONE_C4", "body": "TONE_C4", "description": "#define TONE_C4 262"},
    "TONE_CS4":{"prefix": "TONE_CS4", "body": "TONE_CS4", "description": "#define TONE_CS4 277"},
    "TONE_D4":{"prefix": "TONE_D4", "body": "TONE_D4", "description": "#define TONE_D4 294"},
    "TONE_DS4":{"prefix": "TONE_DS4", "body": "TONE_DS4", "description": "#define TONE_DS4 311"},
    "TONE_E4":{"prefix": "TONE_E4", "body": "TONE_E4", "description": "#define TONE_E4 330"},
    "TONE_F4":{"prefix": "TONE_F4", "body": "TONE_F4", "description": "#define TONE_F4 349"},
    "TONE_FS4":{"prefix": "TONE_FS4", "body": "TONE_FS4", "description": "#define TONE_FS4 370"},
    "TONE_G4":{"prefix": "TONE_G4", "body": "TONE_G4", "description": "#define TONE_G4 392"},
    "TONE_GS4":{"prefix": "TONE_GS4", "body": "TONE_GS4", "description": "#define TONE_GS4 415"},
    "TONE_A4":{"prefix": "TONE_A4", "body": "TONE_A4", "description": "#define TONE_A4 440"},
    "TONE_AS4":{"prefix": "TONE_AS4", "body": "TONE_AS4", "description": "#define TONE_AS4 466"},
    "TONE_B4":{"prefix": "TONE_B4", "body": "TONE_B4", "description": "#define TONE_B4 494"},
    "TONE_C5":{"prefix": "TONE_C5", "body": "TONE_C5", "description": "#define TONE_C5 523"},
    "TONE_CS5":{"prefix": "TONE_CS5", "body": "TONE_CS5", "description": "#define TONE_CS5 554"},
    "TONE_D5":{"prefix": "TONE_D5", "body": "TONE_D5", "description": "#define TONE_D5 587"},
    "TONE_DS5":{"prefix": "TONE_DS5", "body": "TONE_DS5", "description": "#define TONE_DS5 622"},
    "TONE_E5":{"prefix": "TONE_E5", "body": "TONE_E5", "description": "#define TONE_E5 659"},
    "TONE_F5":{"prefix": "TONE_F5", "body": "TONE_F5", "description": "#define TONE_F5 698"},
    "TONE_FS5":{"prefix": "TONE_FS5", "body": "TONE_FS5", "description": "#define TONE_FS5 740"},
    "TONE_G5":{"prefix": "TONE_G5", "body": "TONE_G5", "description": "#define TONE_G5 784"},
    "TONE_GS5":{"prefix": "TONE_GS5", "body": "TONE_GS5", "description": "#define TONE_GS5 831"},
    "TONE_A5":{"prefix": "TONE_A5", "body": "TONE_A5", "description": "#define TONE_A5 880"},
    "TONE_AS5":{"prefix": "TONE_AS5", "body": "TONE_AS5", "description": "#define TONE_AS5 932"},
    "TONE_B5":{"prefix": "TONE_B5", "body": "TONE_B5", "description": "#define TONE_B5 988"},
    "TONE_C6":{"prefix": "TONE_C6", "body": "TONE_C6", "description": "#define TONE_C6 1047"},
    "TONE_CS6":{"prefix": "TONE_CS6", "body": "TONE_CS6", "description": "#define TONE_CS6 1109"},
    "TONE_D6":{"prefix": "TONE_D6", "body": "TONE_D6", "description": "#define TONE_D6 1175"},
    "TONE_DS6":{"prefix": "TONE_DS6", "body": "TONE_DS6", "description": "#define TONE_DS6 1245"},
    "TONE_E6":{"prefix": "TONE_E6", "body": "TONE_E6", "description": "#define TONE_E6 1319"},
    "TONE_F6":{"prefix": "TONE_F6", "body": "TONE_F6", "description": "#define TONE_F6 1397"},
    "TONE_FS6":{"prefix": "TONE_FS6", "body": "TONE_FS6", "description": "#define TONE_FS6 1480"},
    "TONE_G6":{"prefix": "TONE_G6", "body": "TONE_G6", "description": "#define TONE_G6 1568"},
    "TONE_GS6":{"prefix": "TONE_GS6", "body": "TONE_GS6", "description": "#define TONE_GS6 1661"},
    "TONE_A6":{"prefix": "TONE_A6", "body": "TONE_A6", "description": "#define TONE_A6 1760"},
    "TONE_AS6":{"prefix": "TONE_AS6", "body": "TONE_AS6", "description": "#define TONE_AS6 1865"},
    "TONE_B6":{"prefix": "TONE_B6", "body": "TONE_B6", "description": "#define TONE_B6 1976"},
    "TONE_C7":{"prefix": "TONE_C7", "body": "TONE_C7", "description": "#define TONE_C7 2093"},
    "TONE_CS7":{"prefix": "TONE_CS7", "body": "TONE_CS7", "description": "#define TONE_CS7 2217"},
    "TONE_D7":{"prefix": "TONE_D7", "body": "TONE_D7", "description": "#define TONE_D7 2349"},
    "TONE_DS7":{"prefix": "TONE_DS7", "body": "TONE_DS7", "description": "#define TONE_DS7 2489"},
    "TONE_E7":{"prefix": "TONE_E7", "body": "TONE_E7", "description": "#define TONE_E7 2637"},
    "TONE_F7":{"prefix": "TONE_F7", "body": "TONE_F7", "description": "#define TONE_F7 2794"},
    "TONE_FS7":{"prefix": "TONE_FS7", "body": "TONE_FS7", "description": "#define TONE_FS7 2960"},
    "TONE_G7":{"prefix": "TONE_G7", "body": "TONE_G7", "description": "#define TONE_G7 3136"},
    "TONE_GS7":{"prefix": "TONE_GS7", "body": "TONE_GS7", "description": "#define TONE_GS7 3322"},
    "TONE_A7":{"prefix": "TONE_A7", "body": "TONE_A7", "description": "#define TONE_A7 3520"},
    "TONE_AS7":{"prefix": "TONE_AS7", "body": "TONE_AS7", "description": "#define TONE_AS7 3729"},
    "TONE_B7":{"prefix": "TONE_B7", "body": "TONE_B7", "description": "#define TONE_B7 3951"}
}