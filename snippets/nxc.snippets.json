{
    "block-comment":{
        "prefix":"/*",
        "body":["$BLOCK_COMMENT_START","\t$0","$BLOCK_COMMENT_END"],
        "description":"Block comment"
    },
    "main":{
        "prefix":["main()"],
        "body":["task main() {", "\t$0", "}"],
        "description": ["task main() {", "\tbody", "]"]
    },
    "for":{
        "prefix":["for()"],
        "body":["for(int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {", "\t$0", "}"],
        "description": ["for(statement1; bool condition; statement2) {", "\tbody", "}"]
    },
    "while":{
        "prefix":"while()",
        "body":["while($1)$0"],
        "description": ["while(bool condition) {", "\tbody", "}"]
    },
    "repeat":{
        "prefix":["repeat()"],
        "body":["repeat($1) {", "\t$0", "}"],
        "description":["repeat(int) {", "\tbody", "}"]
    },
    "do":{
        "prefix":"do",
        "body":["do {", "\t$1", "}$0"],
        "description": ["do {", "\tbody", "} while(bool condition)"]
    },
    "if":{
        "prefix":["if()"],
        "body":["if($1)$0"],
        "description": ["if(bool condition) {", "\tbody", "}"]
    },
    "else":{
        "prefix":["else"],
        "body":"else",
        "description":["else {", "\tbody", "}"]
    },
    "if-else":{
        "prefix":"if-else",
        "body":["if($1) {", "\t$2", "} else {", "\t$0", "}"],
        "description":["if(bool condition) {", "\tbody", "} else {", "\tbody", "}"]
    },
    "switch":{
        "prefix":"switch()",
        "body":["switch($1) {", "\t$0", "}"],
        "description":["switch(expression) {", "\tbody", "}"]
    },
    "case":{
        "prefix":"case",
        "body":["case:", "\t$0"],
        "description":["case:", "\t//do something", "\tbreak;"]
    },
    "default":{
        "prefix":"default",
        "body":["default:", "\t$0"],
        "description":["default:", "\t//do something", "\tbreak;"]
    },
    "break":{
        "prefix":"break",
        "body":"break",
        "description":"break;"
    },
    "continue":{
        "prefix":"continue",
        "body":"continue",
        "description":"continue;"
    },
    "goto":{
        "prefix":"goto",
        "body":"goto $0",
        "description":"goto [label]"
    },
    "until":{
        "prefix":"until()",
        "body":"until($1)$0",
        "description":"until(bool condition)"
    },
    "asm":{
        "prefix":"asm",
        "body":["asm {", "\t$0", "}"],
        "description":["asm {", "\tbody //NBC assembly language", "}"]
    },
    "start":{
        "prefix":"start",
        "body":"start",
        "description":"start [task_name];"
    },
    "stop":{
        "prefix":"stop",
        "body":"stop",
        "description":"stop [task_name]"
    },
    "priority":{
        "prefix":"priority",
        "body":"priority",
        "description":"priority [task_name]"
    },
    "return":{
        "prefix":"return",
        "body":"return",
        "description":"return [expression]"
    },
    "true":{
        "prefix":"true",
        "body":"true",
        "description":"Represents always true condition"
    },
    "false":{
        "prefix":"false",
        "body":"false",
        "description":"Represents always false condition"
    },
    "#include":{
        "prefix":"#include",
        "body":"#include \"$1\"$0",
        "description":"#include \"[filename]\""
    },
    "#define":{
        "prefix":"#define",
        "body":"#define",
        "description": "#define [symbol]"
    },
    "#import":{
        "prefix":"#import",
        "body":"#import \"$1\" $0",
        "description":"#import \"[filename]\" [symbol]"
    },
    "#download":{
        "prefix":"#download",
        "body":"#download \"$1\"$0",
        "description":"#download \"[filename]\""
    },
    "#ifdef":{
        "prefix":"#ifdef",
        "body":"#ifdef",
        "description":"#ifdef [symbol]"
    },
    "#ifndef":{
        "prefix":"#ifndef",
        "body":"#ifndef",
        "description":"#ifndef [symbol]"
    },
    "#else":{
        "prefix":"#else",
        "body":"#else",
        "description":["#else","//switch from compiling to not compiling & vice versa"]
    },
    "#endif":{
        "prefix":"#endif",
        "body":"#endif",
        "description":["#endif","//return to previous compiling state"]
    },
    "#if":{
        "prefix":"#if",
        "body":"#if",
        "description":["#if [condition]"]
    },
    "#elif":{
        "prefix":"#elif",
        "body":"#elif",
        "description":["#elif [condition]"]
    },
    "void":{
        "prefix":"void",
        "body":"void",
        "description":"void [name]"
    },
    "sub":{
        "prefix":"sub",
        "body":"sub",
        "description":"sub [name]"
    },
    "bool":{
        "prefix":"bool",
        "body":"bool",
        "description":"bool [name]"
    },
    "byte":{
        "prefix":"byte",
        "body":"byte",
        "description":"byte [name]"
    },
    "char":{
        "prefix":"char",
        "body":"char",
        "description":"char [name]"
    },
    "int":{
        "prefix":"int",
        "body":"int",
        "description":"int [name]"
    },
    "short":{
        "prefix":"short",
        "body":"short",
        "description":"short [name]"
    },
    "long":{
        "prefix":"long",
        "body":"long",
        "description":"long [name]"
    },
    "float":{
        "prefix":"float",
        "body":"float",
        "description":"float [name]"
    },
    "mutex":{
        "prefix":"mutex",
        "body":"mutex",
        "description":["mutex [name]","/*","\t32-bit value","\tused to synchronize access to resources shared across multiple threads","*/"]
    },
    "string":{
        "prefix":"string",
        "body":"string",
        "description":"string [name]"
    },
    "enum":{
        "prefix":"enum",
        "body":"enum",
        "description":"enum [name]"
    },
    "typedef":{
        "prefix":"typedef",
        "body":"typedef",
        "description":"typedef [type] [name]"
    },
    "struct":{
        "prefix":"struct",
        "body":"struct",
        "description":"struct [name]"
    },
    "unsigned":{
        "prefix":"unsigned",
        "body":"unsigned",
        "description":"unsigned [declaration]"
    },
    "static":{
        "prefix":"static",
        "body":"static",
        "description":"static [declaration]"
    },
    "inline":{
        "prefix":"inline",
        "body":"inline",
        "description":"inline [declaration]"
    },
    "safecall":{
        "prefix":"safecall",
        "body":"safecall",
        "description":"safecall [declaration]"
    },
    "const":{
        "prefix":"const",
        "body":"const",
        "description":"const [declaration]"
    },
    "task":{
        "prefix":"task",
        "body":["task $1($2) {", "\t$0", "}"],
        "description":["task [name]() {", "\tbody", "}"]
    },
    "SetSensorType":{
        "prefix":"SetSensorType()",
        "body":"SetSensorType(&1)&0",
        "description":"oid SetSensorType (const byte &port, byte type)"
    },
    "SetSensorMode":{
    "prefix": "SetSensorMode()",
    "body": "SetSensorMode($1)$0",
    "description": "void SetSensorMode (const byte &port, byte mode)"
    },
    "ClearSensor":{
        "prefix": "ClearSensor()",
        "body": "ClearSensor($1)$0",
        "description": "void ClearSensor (const byte &port)"
    },
    "ResetSensor":{
        "prefix": "ResetSensor()",
        "body": "ResetSensor($1)$0",
        "description": "void ResetSensor (const byte &port)"
    },
    "SetSensor":{
        "prefix": "SetSensor()",
        "body": "SetSensor($1)$0",
        "description": "void SetSensor (const byte &port, const unsigned int config)"
    },
    "SetSensorTouch":{
        "prefix": "SetSensorTouch()",
        "body": "SetSensorTouch($1)$0",
        "description": "void SetSensorTouch (const byte &port)"
    },
    "SetSensorLight":{
        "prefix": "SetSensorLight()",
        "body": "SetSensorLight($1)$0",
        "description": "void SetSensorLight (const byte &port, bool bActive=true)"
    },
    "SetSensorSound":{
        "prefix": "SetSensorSound()",
        "body": "SetSensorSound($1)$0",
        "description": "void SetSensorSound (const byte &port, bool bdBScaling=true)"
    },
    "SetSensorLowspeed":{
        "prefix": "SetSensorLowspeed()",
        "body": "SetSensorLowspeed($1)$0",
        "description": "void SetSensorLowspeed (const byte &port, bool bIsPowered=true)"
    },
    "SetSensorUltrasonic":{
        "prefix": "SetSensorUltrasonic()",
        "body": "SetSensorUltrasonic($1)$0",
        "description": "void SetSensorUltrasonic (const byte &port)"
    },
    "SetSensorEMeter":{
        "prefix": "SetSensorEMeter()",
        "body": "SetSensorEMeter($1)$0",
        "description": "void SetSensorEMeter (const byte &port)"
    },
    "SetSensorTemperature":{
        "prefix": "SetSensorTemperature()",
        "body": "SetSensorTemperature($1)$0",
        "description": "void SetSensorTemperature (const byte &port)"
    },
    "SetSensorColorFull":{
        "prefix": "SetSensorColorFull()",
        "body": "SetSensorColorFull($1)$0",
        "description": "void SetSensorColorFull (const byte &port)"
    },
    "SetSensorColorRed":{
        "prefix": "SetSensorColorRed()",
        "body": "SetSensorColorRed($1)$0",
        "description": "void SetSensorColorRed (const byte &port)"
    },
    "SetSensorColorGreen":{
        "prefix": "SetSensorColorGreen()",
        "body": "SetSensorColorGreen($1)$0",
        "description": "void SetSensorColorGreen (const byte &port)"
    },
    "SetSensorColorBlue":{
        "prefix": "SetSensorColorBlue()",
        "body": "SetSensorColorBlue($1)$0",
        "description": "void SetSensorColorBlue (const byte &port)"
    },
    "SetSensorColorNone":{
        "prefix": "SetSensorColorNone()",
        "body": "SetSensorColorNone($1)$0",
        "description": "void SetSensorColorNone (const byte &port)"
    },
    "GetInput":{
        "prefix": "GetInput()",
        "body": "GetInput($1)$0",
        "description": "variant GetInput (const byte &port, const byte field)"
    },
    "SetInput":{
        "prefix": "SetInput()",
        "body": "SetInput($1)$0",
        "description": "void SetInput (const byte &port, const int field, variant value)"
    },
    "Sensor":{
        "prefix": "Sensor()",
        "body": "Sensor($1)$0",
        "description": "unsigned int Sensor (const byte &port)"
    },
    "SensorBoolean":{
        "prefix": "SensorBoolean()",
        "body": "SensorBoolean($1)$0",
        "description": "bool SensorBoolean (const byte port)"
    },
    "SensorDigiPinsDirection":{
        "prefix": "SensorDigiPinsDirection()",
        "body": "SensorDigiPinsDirection($1)$0",
        "description": "byte SensorDigiPinsDirection (const byte port)"
    },
    "SensorDigiPinsOutputLevel":{
        "prefix": "SensorDigiPinsOutputLevel()",
        "body": "SensorDigiPinsOutputLevel($1)$0",
        "description": "byte SensorDigiPinsOutputLevel (const byte port)"
    },
    "SensorDigiPinsStatus":{
        "prefix": "SensorDigiPinsStatus()",
        "body": "SensorDigiPinsStatus($1)$0",
        "description": "byte SensorDigiPinsStatus (const byte port)"
    },
    "SensorInvalid":{
        "prefix": "SensorInvalid()",
        "body": "SensorInvalid($1)$0",
        "description": "bool SensorInvalid (const byte &port)"
    },
    "SensorMode":{
        "prefix": "SensorMode()",
        "body": "SensorMode($1)$0",
        "description": "byte SensorMode (const byte &port)"
    },
    "SensorNormalized":{
        "prefix": "SensorNormalized()",
        "body": "SensorNormalized($1)$0",
        "description": "unsigned int SensorNormalized (const byte &port)"
    },
    "SensorRaw":{
        "prefix": "SensorRaw()",
        "body": "SensorRaw($1)$0",
        "description": "unsigned int SensorRaw (const byte &port)"
    },
    "SensorScaled":{
        "prefix": "SensorScaled()",
        "body": "SensorScaled($1)$0",
        "description": "unsigned int SensorScaled (const byte &port)"
    },
    "SensorType":{
        "prefix": "SensorType()",
        "body": "SensorType($1)$0",
        "description": "byte SensorType (const byte &port)"
    },
    "SensorValue":{
        "prefix": "SensorValue()",
        "body": "SensorValue($1)$0",
        "description": "unsigned int SensorValue (const byte &port)"
    },
    "SensorValueBool":{
        "prefix": "SensorValueBool()",
        "body": "SensorValueBool($1)$0",
        "description": "bool SensorValueBool (const byte port)"
    },
    "SensorValueRaw":{
        "prefix": "SensorValueRaw()",
        "body": "SensorValueRaw($1)$0",
        "description": "unsigned int SensorValueRaw (const byte &port)"
    },
    "CustomSensorActiveStatus":{
        "prefix": "CustomSensorActiveStatus()",
        "body": "CustomSensorActiveStatus($1)$0",
        "description": "byte CustomSensorActiveStatus (byte port)"
    },
    "CustomSensorPercentFullScale":{
        "prefix": "CustomSensorPercentFullScale()",
        "body": "CustomSensorPercentFullScale($1)$0",
        "description": "byte CustomSensorPercentFullScale (byte port)"
    },
    "CustomSensorZeroOffset":{
        "prefix": "CustomSensorZeroOffset()",
        "body": "CustomSensorZeroOffset($1)$0",
        "description": "unsigned int CustomSensorZeroOffset (byte port)"
    },
    "SetCustomSensorActiveStatus":{
        "prefix": "SetCustomSensorActiveStatus()",
        "body": "SetCustomSensorActiveStatus($1)$0",
        "description": "void SetCustomSensorActiveStatus (byte port, byte activeStatus)"
    },
    "SetCustomSensorPercentFullScale":{
        "prefix": "SetCustomSensorPercentFullScale()",
        "body": "SetCustomSensorPercentFullScale($1)$0",
        "description": "void SetCustomSensorPercentFullScale (byte port, byte pctFullScale)"
    },
    "SetCustomSensorZeroOffset":{
        "prefix": "SetCustomSensorZeroOffset()",
        "body": "SetCustomSensorZeroOffset($1)$0",
        "description": "void SetCustomSensorZeroOffset (byte port, int zeroOffset)"
    },
    "SetSensorBoolean":{
        "prefix": "SetSensorBoolean()",
        "body": "SetSensorBoolean($1)$0",
        "description": "void SetSensorBoolean (byte port, bool value)"
    },
    "SetSensorDigiPinsDirection":{
        "prefix": "SetSensorDigiPinsDirection()",
        "body": "SetSensorDigiPinsDirection($1)$0",
        "description": "void SetSensorDigiPinsDirection (byte port, byte direction)"
    },
    "SetSensorDigiPinsOutputLevel":{
        "prefix": "SetSensorDigiPinsOutputLevel()",
        "body": "SetSensorDigiPinsOutputLevel($1)$0",
        "description": "void SetSensorDigiPinsOutputLevel (byte port, byte outputLevel)"
    },
    "SetSensorDigiPinsStatus":{
        "prefix": "SetSensorDigiPinsStatus()",
        "body": "SetSensorDigiPinsStatus($1)$0",
        "description": "void SetSensorDigiPinsStatus (byte port, byte status)"
    },
    "SysColorSensorRead":{
        "prefix": "SysColorSensorRead()",
        "body": "SysColorSensorRead($1)$0",
        "description": "void SysColorSensorRead (ColorSensorReadType &args)"
    },
    "ReadSensorColorEx":{
        "prefix": "ReadSensorColorEx()",
        "body": "ReadSensorColorEx($1)$0",
        "description": "int ReadSensorColorEx (const byte &port, int &colorval, unsigned int &raw[ ], unsigned int &norm[ ], int &scaled[ ])"
    },
    "ReadSensorColorRaw":{
        "prefix": "ReadSensorColorRaw()",
        "body": "ReadSensorColorRaw($1)$0",
        "description": "int ReadSensorColorRaw (const byte &port, unsigned int &rawVals[ ])"
    },
    "ColorADRaw":{
        "prefix": "ColorADRaw()",
        "body": "ColorADRaw($1)$0",
        "description": "unsigned int ColorADRaw (byte port, byte color)"
    },
    "ColorBoolean":{
        "prefix": "ColorBoolean()",
        "body": "ColorBoolean($1)$0",
        "description": "bool ColorBoolean (byte port, byte color)"
    },
    "ColorCalibration":{
        "prefix": "ColorCalibration()",
        "body": "ColorCalibration($1)$0",
        "description": "long ColorCalibration (byte port, byte point, byte color)"
    },
    "ColorCalibrationState":{
        "prefix": "ColorCalibrationState()",
        "body": "ColorCalibrationState($1)$0",
        "description": "byte ColorCalibrationState (byte port)"
    },
    "ColorCallLimits":{
        "prefix": "ColorCallLimits()",
        "body": "ColorCallLimits($1)$0",
        "description": "unsigned int ColorCalLimits (byte port, byte point)"
    },
    "ColorSensorRaw":{
        "prefix": "ColorSensorRaw()",
        "body": "ColorSensorRaw($1)$0",
        "description": "unsigned int ColorSensorRaw (byte port, byte color)"
    },
    "ColorSensorValue":{
        "prefix": "ColorSensorValue()",
        "body": "ColorSensorValue($1)$0",
        "description": "unsigned int ColorSensorValue (byte port, byte color)"
    },
    "SysInputPinFunction":{
        "prefix": "SysInputPinFunction()",
        "body": "SysInputPinFunction($1)$0",
        "description": "void SysInputPinFunction (InputPinFunctionType &args)"
    },
    "SetMotorPwnFreq":{
        "prefix": "SetMotorPwnFreq()",
        "body": "SetMotorPwnFreq($1)$0",
        "description": "void SetMotorPwnFreq (byte n)"
    },
    "SetMotorRegulationTime":{
        "prefix": "SetMotorRegulationTime()",
        "body": "SetMotorRegulationTime($1)$0",
        "description": "void SetMotorRegulationTime (byte n)"
    },
    "SetMotorRegulationOptions":{
        "prefix": "SetMotorRegulationOptions()",
        "body": "SetMotorRegulationOptions($1)$0",
        "description": "void SetMotorRegulationOptions (byte n)"
    },
    "OnFwdSyncPID":{
        "prefix": "OnFwdSyncPID()",
        "body": "OnFwdSyncPID($1)$0",
        "description": "void OnFwdSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)"
    },
    "OnFwdSyncExPID":{
        "prefix": "OnFwdSyncExPID()",
        "body": "OnFwdSyncExPID($1)$0",
        "description": "void OnFwdSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)"
    },
    "OnRevSyncPID":{
        "prefix": "OnRevSyncPID()",
        "body": "OnRevSyncPID($1)$0",
        "description": "void OnRevSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)"
    },
    "OnRevSyncExPID":{
        "prefix": "OnRevSyncExPID()",
        "body": "OnRevSyncExPID($1)$0",
        "description": "void OnRevSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)"
    },
    "OnFwdRegPID":{
        "prefix": "OnFwdRegPID()",
        "body": "OnFwdRegPID($1)$0",
        "description": "void OnFwdRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnFwdRegExPID":{
        "prefix": "OnFwdRegExPID()",
        "body": "OnFwdRegExPID($1)$0",
        "description": "void OnFwdRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnRevRegPID":{
        "prefix": "OnRevRegPID()",
        "body": "OnRevRegPID($1)$0",
        "description": "void OnRevRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)"
    },
    "OnRevRegExPID":{
        "prefix": "OnRevRegExPID()",
        "body": "OnRevRegExPID($1)$0",
        "description": "void OnRevRegExPID (byte outputs, char pwr, byte regmode, const byte reset, byte p, byte i, byte d)"
    },
    "Off":{
        "prefix": "Off()",
        "body": "Off($1)$0",
        "description": "void Off (byte outputs)"
    },
    "OffEx":{
        "prefix": "OffEx()",
        "body": "OffEx($1)$0",
        "description": "void OffEx (byte outputs, const byte reset)"
    },
    "Coast":{
        "prefix": "Coast()",
        "body": "Coast($1)$0",
        "description": "void Coast (byte outputs)"
    },
    "CoastEx":{
        "prefix": "CoastEx()",
        "body": "CoastEx($1)$0",
        "description": "void CoastEx (byte outputs, const byte reset)"
    },
    "Float":{
        "prefix": "Float()",
        "body": "Float($1)$0",
        "description": "void Float (byte outputs)"
    },
    "OnFwd":{
        "prefix": "OnFwd()",
        "body": "OnFwd($1)$0",
        "description": "void OnFwd (byte outputs, char pwr)"
    },
    "OnFwdEx":{
        "prefix": "OnFwdEx()",
        "body": "OnFwdEx($1)$0",
        "description": "void OnFwdEx (byte outputs, char pwr, const byte reset)"
    },
    "OnRev":{
        "prefix": "OnRev()",
        "body": "OnRev($1)$0",
        "description": "void OnRev (byte outputs, char pwr)"
    },
    "OnRevEx":{
        "prefix": "OnRevEx()",
        "body": "OnRevEx($1)$0",
        "description": "void OnRevEx (byte outputs, char pwr, const byte reset)"
    },
    "OnFwdReg":{
        "prefix": "OnFwdReg()",
        "body": "OnFwdReg($1)$0",
        "description": "void OnFwdReg (byte outputs, char pwr, byte regmode)"
    },
    "OnFwdRegEx":{
        "prefix": "OnFwdRegEx()",
        "body": "OnFwdRegEx($1)$0",
        "description": "void OnFwdRegEx (byte outputs, char pwr, byte regmode, const byte reset)"
    },
    "OnRevReg":{
        "prefix": "OnRevReg()",
        "body": "OnRevReg($1)$0",
        "description": "void OnRevReg (byte outputs, char pwr, byte regmode)"
    },
    "OnRevRegEx":{
        "prefix": "OnRevRegEx()",
        "body": "OnRevRegEx($1)$0",
        "description": "void OnRevRegEx (byte outputs, char pwr, byte regmode, const byte reset)"
    },
    "OnFwdSync":{
        "prefix": "OnFwdSync()",
        "body": "OnFwdSync($1)$0",
        "description": "void OnFwdSync (byte outputs, char pwr, char turnpct)"
    },
    "OnFwdSyncEx":{
        "prefix": "OnFwdSyncEx()",
        "body": "OnFwdSyncEx($1)$0",
        "description": "void OnFwdSyncEx (byte outputs, char pwr, char turnpct, const byte reset)"
    },
    "OnRevSync":{
        "prefix": "OnRevSync()",
        "body": "OnRevSync($1)$0",
        "description": "void OnRevSync (byte outputs, char pwr, char turnpct)"
    },
    "OnRevSyncEx":{
        "prefix": "OnRevSyncEx()",
        "body": "OnRevSyncEx($1)$0",
        "description": "void OnRevSyncEx (byte outputs, char pwr, char turnpct, const byte reset)"
    },
    "RotateMotor":{
        "prefix": "RotateMotor()",
        "body": "RotateMotor($1)$0",
        "description": "void RotateMotor (byte outputs, char pwr, long angle)"
    },
    "RotateMotorPID":{
        "prefix": "RotateMotorPID()",
        "body": "RotateMotorPID($1)$0",
        "description": "void RotateMotorPID (byte outputs, char pwr, long angle, byte p, byte i, byte d)"
    },
    "RotateMotorEx":{
        "prefix": "RotateMotorEx()",
        "body": "RotateMotorEx($1)$0",
        "description": "void RotateMotorEx (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop)"
    },
    "RotateMotorExPID":{
        "prefix": "RotateMotorExPID()",
        "body": "RotateMotorExPID($1)$0",
        "description": "void RotateMotorExPID (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop, byte p, byte i, byte d)"
    },
    "ResetTachoCount":{
        "prefix": "ResetTachoCount()",
        "body": "ResetTachoCount($1)$0",
        "description": "void ResetTachoCount (byte outputs)"
    },
    "ResetBlockTachoCount":{
        "prefix": "ResetBlockTachoCount()",
        "body": "ResetBlockTachoCount($1)$0",
        "description": "void ResetBlockTachoCount (byte outputs)"
    },
    "ResetRotationCount":{
        "prefix": "ResetRotationCount()",
        "body": "ResetRotationCount($1)$0",
        "description": "void ResetRotationCount (byte outputs)"
    },
    "ResetAllTachoCount":{
        "prefix": "ResetAllTachoCount()",
        "body": "ResetAllTachoCount($1)$0",
        "description": "void ResetAllTachoCounts (byte outputs)"
    },
    "SetOutput":{
        "prefix": "SetOutput()",
        "body": "SetOutput($1)$0",
        "description": "void SetOutput (byte outputs, byte field1, variant val1,..., byte fieldN, variant valN)"
    },
    "GetOutput":{
        "prefix": "GetOutput()",
        "body": "GetOutput($1)$0",
        "description": "variant GetOutput (byte output, const byte field)"
    },
    "MotorMode":{
        "prefix": "MotorMode()",
        "body": "MotorMode($1)$0",
        "description": "byte MotorMode (byte output)"
    },
    "MotorPower":{
        "prefix": "MotorPower()",
        "body": "MotorPower($1)$0",
        "description": "char MotorPower (byte output)"
    },
    "MotorActualSpeed":{
        "prefix": "MotorActualSpeed()",
        "body": "MotorActualSpeed($1)$0",
        "description": "char MotorActualSpeed (byte output)"
    },
    "MotorTachoCount":{
        "prefix": "MotorTachoCount()",
        "body": "MotorTachoCount($1)$0",
        "description": "long MotorTachoCount (byte output)"
    },
    "MotorTachoLimit":{
        "prefix": "MotorTachoLimit()",
        "body": "MotorTachoLimit($1)$0",
        "description": "long MotorTachoLimit (byte output)"
    },
    "MotorRunState":{
        "prefix": "MotorRunState()",
        "body": "MotorRunState($1)$0",
        "description": "byte MotorRunState (byte output)"
    },
    "MotorTurnRatio":{
        "prefix": "MotorTurnRatio()",
        "body": "MotorTurnRatio($1)$0",
        "description": "char MotorTurnRatio (byte output)"
    },
    "MotorRegulation":{
        "prefix": "MotorRegulation()",
        "body": "MotorRegulation($1)$0",
        "description": "byte MotorRegulation (byte output)"
    },
    "MotorOverload":{
        "prefix": "MotorOverload()",
        "body": "MotorOverload($1)$0",
        "description": "bool MotorOverload (byte output)"
    },
    "MotorRegPValue":{
        "prefix": "MotorRegPValue()",
        "body": "MotorRegPValue($1)$0",
        "description": "byte MotorRegPValue (byte output)"
    },
    "MotorRegIValue":{
        "prefix": "MotorRegIValue()",
        "body": "MotorRegIValue($1)$0",
        "description": "byte MotorRegIValue (byte output)"
    },
    "MotorRegDValue":{
        "prefix": "MotorRegDValue()",
        "body": "MotorRegDValue($1)$0",
        "description": "byte MotorRegDValue (byte output)"
    },
    "MotorBlockTachoCount":{
        "prefix": "MotorBlockTachoCount()",
        "body": "MotorBlockTachoCount($1)$0",
        "description": "long MotorBlockTachoCount (byte output)"
    },
    "MotorRotationCount":{
        "prefix": "MotorRotationCount()",
        "body": "MotorRotationCount($1)$0",
        "description": "long MotorRotationCount (byte output)"
    },
    "MotorOutputOptions":{
        "prefix": "MotorOutputOptions()",
        "body": "MotorOutputOptions($1)$0",
        "description": "byte MotorOutputOptions (byte output)"
    },
    "MotorMaxSpeed":{
        "prefix": "MotorMaxSpeed()",
        "body": "MotorMaxSpeed($1)$0",
        "description": "byte MotorMaxSpeed (byte output)"
    },
    "MotorMaxAcceleration":{
        "prefix": "MotorMaxAcceleration()",
        "body": "MotorMaxAcceleration($1)$0",
        "description": "byte MotorMaxAcceleration (byte output)"
    },
    "MotorPwnFreq":{
        "prefix": "MotorPwnFreq()",
        "body": "MotorPwnFreq($1)$0",
        "description": "byte MotorPwnFreq ()"
    },
    "MotorRegulationTime":{
        "prefix": "MotorRegulationTime()",
        "body": "MotorRegulationTime($1)$0",
        "description": "byte MotorRegulationTime ()"
    },
    "MotorRegulationOptions":{
        "prefix": "MotorRegulationOptions()",
        "body": "MotorRegulationOptions($1)$0",
        "description": "byte MotorRegulationOptions ()"
    },
    "PosRegEnable":{
        "prefix": "PosRegEnable()",
        "body": "PosRegEnable($1)$0",
        "description": "void PosRegEnable (byte output, byte p=PID_3, byte i=PID_1, byte d=PID_1)"
    },
    "PosRegSetAngle":{
        "prefix": "PosRegSetAngle()",
        "body": "PosRegSetAngle($1)$0",
        "description": "void PosRegSetAngle (byte output, long angle)"
    },
    "PosRegAddAngle":{
        "prefix": "PosRegAddAngle()",
        "body": "PosRegAddAngle($1)$0",
        "description": "void PosRegAddAngle (byte output, long angle_add)"
    },
    "PosRegSetMax":{
        "prefix": "PosRegSetMax()",
        "body": "PosRegSetMax($1)$0",
        "description": "void PosRegSetMax (byte output, byte max_speed, byte max_acceleration)"
    },
    "ResetScreen":{
        "prefix": "ResetScreen()",
        "body": "ResetScreen",
        "description": "void ResetScreen ()"
    },
    "CircleOut":{
        "prefix": "CircleOut()",
        "body": "CircleOut($1)$0",
        "description": "char CircleOut (int x, int y, byte radius, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "LineOut":{
        "prefix": "LineOut()",
        "body": "LineOut($1)$0",
        "description": "char LineOut (int x1, int y1, int x2, int y2, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "PointOut":{
        "prefix": "PointOut()",
        "body": "PointOut($1)$0",
        "description": "char PointOut (int x, int y, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "RectOut":{
        "prefix": "RectOut()",
        "body": "RectOut($1)$0",
        "description": " char RectOut (int x, int y, int width, int height, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "TextOut":{
        "prefix": "TextOut()",
        "body": "TextOut($1)$0",
        "description": " char TextOut (int x, int y, string str, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "NumOut":{
        "prefix": "NumOut()",
        "body": "NumOut($1)$0",
        "description": "char NumOut (int x, int y, variant value, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "EllipseOut":{
        "prefix": "EllipseOut()",
        "body": "EllipseOut($1)$0",
        "description": "char EllipseOut (int x, int y, byte radiusX, byte radiusY, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "PolyOut":{
        "prefix": "PolyOut()",
        "body": "PolyOut($1)$0",
        "description": "char PolyOut (LocationType points[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "FontTextOut":{
        "prefix": "FontTextOut()",
        "body": "FontTextOut($1)$0",
        "description": "char FontTextOut (int x, int y, string filename, string str, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "FontNumOut":{
        "prefix": "FontNumOut()",
        "body": "FontNumOut($1)$0",
        "description": "char FontNumOut (int x, int y, string filename, variant value, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicOut":{
        "prefix": "GraphicOut()",
        "body": "GraphicOut($1)$0",
        "description": "char GraphicOut (int x, int y, string filename, unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicArrayOut":{
        "prefix": "GraphicArrayOut()",
        "body": "GraphicArrayOut($1)$0",
        "description": "char GraphicArrayOut (int x, int y, byte data[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicOutEx":{
        "prefix": "GraphicOutEx()",
        "body": "GraphicOutEx($1)$0",
        "description": "char GraphicOutEx (int x, int y, string filename, byte vars[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GraphicArrayOutEx":{
        "prefix": "GraphicArrayOutEx()",
        "body": "GraphicArrayOutEx($1)$0",
        "description": "char GraphicArrayOutEx (int x, int y, byte data[ ], byte vars[ ], unsigned long options=DRAW_OPT_NORMAL)"
    },
    "GetDisplayNormal":{
        "prefix": "GetDisplayNormal()",
        "body": "GetDisplayNormal($1)$0",
        "description": "void GetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte &data[ ])"
    },
    "SetDisplayNormal":{
        "prefix": "SetDisplayNormal()",
        "body": "SetDisplayNormal($1)$0",
        "description": "void SetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte data[ ])"
    },
    "GetDisplayPopup":{
        "prefix": "GetDisplayPopup()",
        "body": "GetDisplayPopup($1)$0",
        "description": "void GetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte &data[ ])"
    },
    "SetDisplayPopup":{
        "prefix": "SetDisplayPopup()",
        "body": "SetDisplayPopup($1)$0",
        "description": "void SetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte data[ ])"
    },
    "DisplayEraseMask":{
        "prefix": "DisplayEraseMask()",
        "body": "DisplayEraseMask($1)$0",
        "description": "unsigned long DisplayEraseMask ()"
    },
    "DisplayUpdateMask":{
        "prefix": "DisplayUpdateMask()",
        "body": "DisplayUpdateMask($1)$0",
        "description": "unsigned long DisplayUpdateMask ()"
    },
    "DisplayFont":{
        "prefix": "DisplayFont()",
        "body": "DisplayFont($1)$0",
        "description": "unsigned long DisplayFont ()"
    },
    "DisplayDisplay":{
        "prefix": "DisplayDisplay()",
        "body": "DisplayDisplay($1)$0",
        "description": "unsigned long DisplayDisplay ()"
    },
    "DisplayFlags":{
        "prefix": "DisplayFlags()",
        "body": "DisplayFlags($1)$0",
        "description": "byte DisplayFlags ()"
    },
    "DisplayTextLinesCenterFlags":{
        "prefix": "DisplayTextLinesCenterFlags()",
        "body": "DisplayTextLinesCenterFlags($1)$0",
        "description": "byte DisplayTextLinesCenterFlags ()"
    },
    "SysDrawText":{
        "prefix": "SysDrawText()",
        "body": "SysDrawText($1)$0",
        "description": "void SysDrawText (DrawTextType &args)"
    },
    "SysDrawPoint":{
        "prefix": "SysDrawPoint()",
        "body": "SysDrawPoint($1)$0",
        "description": "void SysDrawPoint (DrawPointType &args)"
    },
    "SysDrawLine":{
        "prefix": "SysDrawLine()",
        "body": "SysDrawLine($1)$0",
        "description": "void SysDrawLine (DrawLineType &args)"
    },
    "SysDrawCircle":{
        "prefix": "SysDrawCircle()",
        "body": "SysDrawCircle($1)$0",
        "description": "void SysDrawCircle (DrawCircleType &args)"
    },
    "SysDrawRect":{
        "prefix": "SysDrawRect()",
        "body": "SysDrawRect($1)$0",
        "description": "void SysDrawRect (DrawRectType &args)"
    },
    "SysDrawGraphic":{
        "prefix": "SysDrawGraphic()",
        "body": "SysDrawGraphic($1)$0",
        "description": "void SysDrawGraphic (DrawGraphicType &args)"
    },
    "SysSetScreenMode":{
        "prefix": "SysSetScreenMode()",
        "body": "SysSetScreenMode($1)$0",
        "description": "void SysSetScreenMode (SetScreenModeType &args)"
    },
    "SysDisplayExecuteFunction":{
        "prefix": "SysDisplayExecuteFunction()",
        "body": "SysDisplayExecuteFunction($1)$0",
        "description": "void SysDisplayExecuteFunction (DisplayExecuteFunctionType &args)"
    },
    "DisplayContrast":{
        "prefix": "DisplayContrast()",
        "body": "DisplayContrast($1)$0",
        "description": "byte DisplayContrast ()"
    },
    "SysDrawGraphicArray":{
        "prefix": "SysDrawGraphicArray()",
        "body": "SysDrawGraphicArray($1)$0",
        "description": "void SysDrawGraphicArray (DrawGraphicArrayType &args)"
    },
    "SysDrawPolygon":{
        "prefix": "SysDrawPolygon()",
        "body": "SysDrawPolygon($1)$0",
        "description": "void SysDrawPolygon (DrawPolygonType &args)"
    },
    "SysDrawEllipse":{
        "prefix": "SysDrawEllipse()",
        "body": "SysDrawEllipse($1)$0",
        "description": "void SysDrawEllipse (DrawEllipseType &args)"
    },
    "SysDrawFont":{
        "prefix": "SysDrawFont()",
        "body": "SysDrawFont($1)$0",
        "description": "void SysDrawFont (DrawFontType &args)"
    },
    "ClearScreen":{
        "prefix": "ClearScreen()",
        "body": "ClearScreen($1)$0",
        "description": "void ClearScreen ()"
    },
    "ClearLine":{
        "prefix": "ClearLine()",
        "body": "ClearLine($1)$0",
        "description": "void ClearLine (byte line)"
    },
    "SetDisplayFont":{
        "prefix": "SetDisplayFont()",
        "body": "SetDisplayFont($1)$0",
        "description": "void SetDisplayFont (unsigned long fontaddr)"
    },
    "SetDisplayDisplay":{
        "prefix": "SetDisplayDisplay()",
        "body": "SetDisplayDisplay($1)$0",
        "description": "void SetDisplayDisplay (unsigned long dispaddr)"
    },
    "SetDisplayEraseMask":{
        "prefix": "SetDisplayEraseMask()",
        "body": "SetDisplayEraseMask($1)$0",
        "description": "void SetDisplayEraseMask (unsigned long eraseMask)"
    },
    "SetDisplayFlags":{
        "prefix": "SetDisplayFlags()",
        "body": "SetDisplayFlags($1)$0",
        "description": "void SetDisplayFlags (byte flags)"
    },
    "SetDisplayTextLinesCenterFlags":{
        "prefix": "SetDisplayTextLinesCenterFlags()",
        "body": "SetDisplayTextLinesCenterFlags($1)$0",
        "description": "void SetDisplayTextLinesCenterFlags (byte ctrFlags)"
    },
    "SetDisplayUpdateMask":{
        "prefix": "SetDisplayUpdateMask()",
        "body": "SetDisplayUpdateMask($1)$0",
        "description": "void SetDisplayUpdateMask (unsigned long updateMask)"
    },
    "SetDisplayContrast":{
        "prefix": "SetDisplayContrast()",
        "body": "SetDisplayContrast($1)$0",
        "description": "void SetDisplayContrast (byte contrast)"
    },
    "PlayFile":{
        "prefix": "PlayFile()",
        "body": "PlayFile($1)$0",
        "description": "char PlayFile (string filename)"
    },
    "PlayFileEx":{
        "prefix": "PlayFileEx()",
        "body": "PlayFileEx($1)$0",
        "description": "char PlayFileEx (string filename, byte volume, bool loop)"
    },
    "PlayTone":{
        "prefix": "PlayTone()",
        "body": "PlayTone($1)$0",
        "description": "char PlayTone (unsigned int frequency, unsigned int duration)"
    },
    "PlayToneEx":{
        "prefix": "PlayToneEx()",
        "body": "PlayToneEx($1)$0",
        "description": "char PlayToneEx (unsigned int frequency, unsigned int duration, byte volume, bool loop)"
    },
    "SoundState":{
        "prefix": "SoundState()",
        "body": "SoundState($1)$0",
        "description": "byte SoundState ()"
    },
    "SoundFlags":{
        "prefix": "SoundFlags()",
        "body": "SoundFlags($1)$0",
        "description": "byte SoundFlags ()"
    },
    "StopSound":{
        "prefix": "StopSound()",
        "body": "StopSound($1)$0",
        "description": "byte StopSound ()"
    },
    "SoundFrequency":{
        "prefix": "SoundFrequency()",
        "body": "SoundFrequency($1)$0",
        "description": "unsigned int SoundFrequency ()"
    },
    "SoundDuration":{
        "prefix": "SoundDuration()",
        "body": "SoundDuration($1)$0",
        "description": "unsigned int SoundDuration ()"
    },
    "SoundSampleRate":{
        "prefix": "SoundSampleRate()",
        "body": "SoundSampleRate($1)$0",
        "description": "unsigned int SoundSampleRate ()"
    },
    "SoundMode":{
        "prefix": "SoundMode()",
        "body": "SoundMode($1)$0",
        "description": "byte SoundMode ()"
    },
    "SoundVolume":{
        "prefix": "SoundVolume()",
        "body": "SoundVolume($1)$0",
        "description": "byte SoundVolume ()"
    },
    "SetSoundDuration":{
        "prefix": "SetSoundDuration()",
        "body": "SetSoundDuration($1)$0",
        "description": "void SetSoundDuration (unsigned int duration)"
    },
    "SetSoundFlags":{
        "prefix": "SetSoundFlags()",
        "body": "SetSoundFlags($1)$0",
        "description": "void SetSoundFlags (byte flags)"
    },
    "SetSoundFrequency":{
        "prefix": "SetSoundFrequency()",
        "body": "SetSoundFrequency($1)$0",
        "description": "void SetSoundFrequency (unsigned int frequency)"
    },
    "SetSoundMode":{
        "prefix": "SetSoundMode()",
        "body": "SetSoundMode($1)$0",
        "description": "void SetSoundMode (byte mode)"
    },
    "SetSoundModuleState":{
        "prefix": "SetSoundModuleState()",
        "body": "SetSoundModuleState($1)$0",
        "description": "void SetSoundModuleState (byte state)"
    },
    "SetSoundSampleRate":{
        "prefix": "SetSoundSampleRate()",
        "body": "SetSoundSampleRate($1)$0",
        "description": "void SetSoundSampleRate (unsigned int sampleRate)"
    },
    "SetSoundVolume":{
        "prefix": "SetSoundVolume()",
        "body": "SetSoundVolume($1)$0",
        "description": "void SetSoundVolume (byte volume)"
    },
    "SysSoundPlayFile":{
        "prefix": "SysSoundPlayFile()",
        "body": "SysSoundPlayFile($1)$0",
        "description": "void SysSoundPlayFile (SoundPlayFileType &args)"
    },
    "SysSoundPlayTone":{
        "prefix": "SysSoundPlayTone()",
        "body": "SysSoundPlayTone($1)$0",
        "description": "void SysSoundPlayTone (SoundPlayToneType &args)"
    },
    "SoundGetState":{
        "prefix": "SoundGetState()",
        "body": "SoundGetState($1)$0",
        "description": "void SysSoundGetState (SoundGetStateType &args)"
    },
    "SysSoundSetState":{
        "prefix": "SysSoundSetState()",
        "body": "SysSoundSetState($1)$0",
        "description": "void SysSoundSetState (SoundSetStateType &args)"
    },
    "PlaySound":{
        "prefix": "PlaySound()",
        "body": "PlaySound($1)$0",
        "description": "void PlaySound (const int &aCode)"
    },
    "PlayTones":{
        "prefix": "PlayTones()",
        "body": "PlayTones($1)$0",
        "description": "void PlayTones (Tone tones[])"
    },    
    "S1":{"prefix":"S1","body":"S1","description":"#define S1 0"},
    "S2":{"prefix":"S2","body":"S2","description":"#define S2 1"},
    "S3":{"prefix":"S3","body":"S3","description":"#define S3 2"},
    "S4":{"prefix":"S4","body":"S4","description":"#define S4 3"},
    "IN_1":{"prefix": "IN_1", "body": "IN_1", "description": "#define IN_1 0x00"},
    "IN_2":{"prefix": "IN_2", "body": "IN_2", "description": "#define IN_2 0x01"},
    "IN_3":{"prefix": "IN_3", "body": "IN_3", "description": "#define IN_3 0x02"},
    "IN_4":{"prefix": "IN_4", "body": "IN_4", "description": "#define IN_4 0x03"},
    "SENSOR_1":{"prefix": "SENSOR_1", "body": "SENSOR_1", "description": "#define SENSOR_1 Sensor(S1)"},
    "SENSOR_2":{"prefix": "SENSOR_2", "body": "SENSOR_2", "description": "#define SENSOR_2 Sensor(S2)"},
    "SENSOR_3":{"prefix": "SENSOR_3", "body": "SENSOR_3", "description": "#define SENSOR_3 Sensor(S3)"},
    "SENSOR_4":{"prefix": "SENSOR_4", "body": "SENSOR_4", "description": "#define SENSOR_4 Sensor(S4)"},
    "SENSOR_TYPE_NONE":{"prefix":"SENSOR_TYPE_NONE","body":"SENSOR_TYPE_NONE","description":"#define SENSOR_TYPE_NONE IN_TYPE_NO_SENSOR"},
    "SENSOR_TYPE_TOUCH":{"prefix":"SENSOR_TYPE_TOUCH","body":"SENSOR_TYPE_TOUCH","description":"#define SENSOR_TYPE_TOUCH IN_TYPE_SWITCH"},
    "SENSOR_TYPE_TEMPERATURE":{"prefix":"SENSOR_TYPE_TEMPERATURE","body":"SENSOR_TYPE_TEMPERATURE","description":"#define SENSOR_TYPE_TEMPERATURE IN_TYPE_TEMPERATURE"},
    "SENSOR_TYPE_LIGHT":{"prefix":"SENSOR_TYPE_LIGHT","body":"SENSOR_TYPE_LIGHT","description":"#define SENSOR_TYPE_LIGHT IN_TYPE_REFLECTION"},
    "SENSOR_TYPE_ROTATION":{"prefix":"SENSOR_TYPE_ROTATION","body":"SENSOR_TYPE_ROTATION","description":"#define SENSOR_TYPE_ROTATION IN_TYPE_ANGLE"},
    "SENSOR_TYPE_LIGHT_ACTIVE":{"prefix":"SENSOR_TYPE_LIGHT_ACTIVE","body":"SENSOR_TYPE_LIGHT_ACTIVE","description":"#define SENSOR_TYPE_LIGHT_ACTIVE IN_TYPE_LIGHT_ACTIVE"},
    "SENSOR_TYPE_LIGHT_INACTIVE":{"prefix":"SENSOR_TYPE_LIGHT_INACTIVE","body":"SENSOR_TYPE_LIGHT_INACTIVE","description":"#define SENSOR_TYPE_LIGHT_INACTIVE IN_TYPE_LIGHT_INACTIVE"},
    "SENSOR_TYPE_SOUND_DB":{"prefix":"SENSOR_TYPE_SOUND_DB","body":"SENSOR_TYPE_SOUND_DB","description":"#define SENSOR_TYPE_SOUND_DB IN_TYPE_SOUND_DB"},
    "SENSOR_TYPE_SOUND_DBA":{"prefix":"SENSOR_TYPE_SOUND_DBA","body":"SENSOR_TYPE_SOUND_DBA","description":"#define SENSOR_TYPE_SOUND_DBA IN_TYPE_SOUND_DBA"},
    "SENSOR_TYPE_CUSTOM":{"prefix":"SENSOR_TYPE_CUSTOM","body":"SENSOR_TYPE_CUSTOM","description":"#define SENSOR_TYPE_CUSTOM IN_TYPE_CUSTOM"},
    "SENSOR_TYPE_LOWSPEED":{"prefix":"SENSOR_TYPE_LOWSPEED","body":"SENSOR_TYPE_LOWSPEED","description":"#define SENSOR_TYPE_LOWSPEED IN_TYPE_LOWSPEED"},
    "SENSOR_TYPE_LOWSPEED_9V":{"prefix":"SENSOR_TYPE_LOWSPEED_9V","body":"SENSOR_TYPE_LOWSPEED_9V","description":"#define SENSOR_TYPE_LOWSPEED_9V IN_TYPE_LOWSPEED_9V"},
    "SENSOR_TYPE_HIGHSPEED":{"prefix":"SENSOR_TYPE_HIGHSPEED","body":"SENSOR_TYPE_HIGHSPEED","description":"#define SENSOR_TYPE_HIGHSPEED IN_TYPE_HISPEED"},
    "SENSOR_TYPE_COLORFULL":{"prefix":"SENSOR_TYPE_COLORFULL","body":"SENSOR_TYPE_COLORFULL","description":"#define SENSOR_TYPE_COLORFULL IN_TYPE_COLORFULL"},
    "SENSOR_TYPE_COLORRED":{"prefix":"SENSOR_TYPE_COLORRED","body":"SENSOR_TYPE_COLORRED","description":"#define SENSOR_TYPE_COLORRED IN_TYPE_COLORRED"},
    "SENSOR_TYPE_COLORGREEN":{"prefix":"SENSOR_TYPE_COLORGREEN","body":"SENSOR_TYPE_COLORGREEN","description":"#define SENSOR_TYPE_COLORGREEN IN_TYPE_COLORGREEN"},
    "SENSOR_TYPE_COLORBLUE":{"prefix":"SENSOR_TYPE_COLORBLUE","body":"SENSOR_TYPE_COLORBLUE","description":"#define SENSOR_TYPE_COLORBLUE IN_TYPE_COLORBLUE"},
    "SENSOR_TYPE_COLORNONE":{"prefix":"SENSOR_TYPE_COLORNONE","body":"SENSOR_TYPE_COLORNONE","description":"#define SENSOR_TYPE_COLORNONE IN_TYPE_COLORNONE"},
    "SENSOR_MODE_RAW":{"prefix":"SENSOR_MODE_RAW","body":"SENSOR_MODE_RAW","description":"define SENSOR_MODE_RAW IN_MODE_RAW"},
    "SENSOR_MODE_BOOL":{"prefix":"SENSOR_MODE_BOOL","body":"SENSOR_MODE_BOOL","description":"define SENSOR_MODE_BOOL IN_MODE_BOOLEAN"},
    "SENSOR_MODE_EDGE":{"prefix":"SENSOR_MODE_EDGE","body":"SENSOR_MODE_EDGE","description":"define SENSOR_MODE_EDGE IN_MODE_TRANSITIONCNT"},
    "SENSOR_MODE_PULSE":{"prefix":"SENSOR_MODE_PULSE","body":"SENSOR_MODE_PULSE","description":"define SENSOR_MODE_PULSE IN_MODE_PERIODCOUNTER"},
    "SENSOR_MODE_PERCENT":{"prefix":"SENSOR_MODE_PERCENT","body":"SENSOR_MODE_PERCENT","description":"define SENSOR_MODE_PERCENT IN_MODE_PCTFULLSCALE"},
    "SENSOR_MODE_CELSIUS":{"prefix":"SENSOR_MODE_CELSIUS","body":"SENSOR_MODE_CELSIUS","description":"define SENSOR_MODE_CELSIUS IN_MODE_CELSIUS"},
    "SENSOR_MODE_FAHRENHEIT":{"prefix":"SENSOR_MODE_FAHRENHEIT","body":"SENSOR_MODE_FAHRENHEIT","description":"define SENSOR_MODE_FAHRENHEIT IN_MODE_FAHRENHEIT"},
    "SENSOR_MODE_ROTATION":{"prefix":"SENSOR_MODE_ROTATION","body":"SENSOR_MODE_ROTATION","description":"define SENSOR_MODE_ROTATION IN_MODE_ANGLESTEP"},
    "_SENSOR_CFG":{"prefix":"_SENSOR_CFG","body":"_SENSOR_CFG","description":"#define _SENSOR_CFG(_type, _mode) (((_type)<<8)+(_mode))"},
    "SENSOR_TOUCH":{"prefix":"SENSOR_TOUCH","body":"SENSOR_TOUCH","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_BOOL)"},
    "SENSOR_LIGHT":{"prefix":"SENSOR_LIGHT","body":"SENSOR_LIGHT","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT,SENSOR_MODE_PERCENT)"},
    "SENSOR_ROTATION":{"prefix":"SENSOR_ROTATION","body":"SENSOR_ROTATION","description":"_SENSOR_CFG(SENSOR_TYPE_ROTATION,SENSOR_MODE_ROTATION)"},
    "SENSOR_CELCIUS":{"prefix":"SENSOR_CELCIUS","body":"SENSOR_CELCIUS","description":"_SENSOR_CFG(SENSOR_TYPE_TEMPERATURE,SENSOR_MODE_CELCIUS)"},
    "SENSOR_FAHRENHEIT":{"prefix":"SENSOR_FAHRENHEIT","body":"SENSOR_FAHRENHEIT","description":"_SENSOR_CFG(SENSOR_TYPE_TEMPERATURE,SENSOR_MODE_FAHRENHEIT)"},
    "SENSOR_PULSE":{"prefix":"SENSOR_PULSE","body":"SENSOR_PULSE","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_PULSE)"},
    "SENSOR_EDGE":{"prefix":"SENSOR_EDGE","body":"SENSOR_EDGE","description":"_SENSOR_CFG(SENSOR_TYPE_TOUCH,SENSOR_MODE_EDGE)"},
    "SENSOR_NXTLIGHT":{"prefix":"SENSOR_NXTLIGHT","body":"SENSOR_NXTLIGHT","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT_ACTIVE,SENSOR_MODE_PERCENT)"},
    "SENSOR_SOUND":{"prefix":"SENSOR_SOUND","body":"SENSOR_SOUND","description":"_SENSOR_CFG(SENSOR_TYPE_LIGHT_SOUND,SENSOR_MODE_PERCENT)"},
    "OUT_A":{"prefix":"OUT_A","body":"OUT_A","description":"#define OUT_A 0x00"},
    "OUT_B":{"prefix":"OUT_B","body":"OUT_B","description":"#define OUT_B 0x01"},
    "OUT_C":{"prefix":"OUT_C","body":"OUT_C","description":"#define OUT_C 0x02"},
    "OUT_AB":{"prefix":"OUT_AB","body":"OUT_AB","description":"#define OUT_AB 0x03"},
    "OUT_AC":{"prefix":"OUT_AC","body":"OUT_AC","description":"#define OUT_AC 0x04"},
    "OUT_BC":{"prefix":"OUT_BC","body":"OUT_BC","description":"#define OUT_BC 0x05"},
    "OUT_ABC":{"prefix":"OUT_ABC","body":"OUT_ABC","description":"#define OUT_ABC 0x06"},
    "OUT_MODE_COAST":{"prefix":"OUT_MODE_COAST","body":"OUT_MODE_COAST","description":"#define OUT_MODE_COAST 0x00"},
    "OUT_MODE_MOTORON":{"prefix":"OUT_MODE_MOTORON","body":"OUT_MODE_MOTORON","description":"#define OUT_MODE_MOTORON 0x01"},
    "OUT_MODE_BRAKE":{"prefix":"OUT_MODE_BRAKE","body":"OUT_MODE_BRAKE","description":"#define OUT_MODE_BRAKE 0x02"},
    "OUT_MODE_REGULATED":{"prefix":"OUT_MODE_REGULATED","body":"OUT_MODE_REGULATED","description":"#define OUT_MODE_REGULATED 0x04"},
    "OUT_MODE_REGMETHOD":{"prefix":"OUT_MODE_REGMETHOD","body":"OUT_MODE_REGMETHOD","description":"#define OUT_MODE_REGMETHOD 0xF0"},
    "OUT_OPTION_HOLDATLIMIT":{"prefix": "OUT_OPTION_HOLDATLIMIT","body": "OUT_OPTION_HOLDATLIMIT","description": "#define OUT_OPTION_HOLDATLIMIT 0x10"},
    "OUT_OPTION_RAMPDOWNTOLIMIT":{"prefix": "OUT_OPTION_RAMPDOWNTOLIMIT","body": "OUT_OPTION_RAMPDOWNTOLIMIT","description": "#define OUT_OPTION_RAMPDOWNTOLIMIT 0x20"},
    "OUT_REGOPTION_NO_SATURATION":{"prefix": "OUT_REGOPTION_NO_SATURATION","body": "OUT_REGOPTION_NO_SATURATION","description": "#define OUT_REGOPTION_NO_SATURATION 0x01"},
    "OUT_RUNSTATE_IDLE":{"prefix": "OUT_RUNSTATE_IDLE","body": "OUT_RUNSTATE_IDLE","description": "#define OUT_RUNSTATE_IDLE 0x00"},
    "OUT_RUNSTATE_RAMPUP":{"prefix": "OUT_RUNSTATE_RAMPUP","body": "OUT_RUNSTATE_RAMPUP","description": "#define OUT_RUNSTATE_RAMPUP 0x10"},
    "OUT_RUNSTATE_RUNNING":{"prefix": "OUT_RUNSTATE_RUNNING","body": "OUT_RUNSTATE_RUNNING","description": "#define OUT_RUNSTATE_RUNNING 0x20"},
    "OUT_RUNSTATE_RAMPDOWN":{"prefix": "OUT_RUNSTATE_RAMPDOWN","body": "OUT_RUNSTATE_RAMPDOWN","description": "#define OUT_RUNSTATE_RAMPDOWN 0x40"},
    "OUT_RUNSTATE_HOLD":{"prefix": "OUT_RUNSTATE_HOLD","body": "OUT_RUNSTATE_HOLD","description": "#define OUT_RUNSTATE_HOLD 0x60"},
    "OUT_REGMODE_IDLE":{"prefix": "OUT_REGMODE_IDLE","body": "OUT_REGMODE_IDLE","description": "#define OUT_REGMODE_IDLE 0"},
    "OUT_REGMODE_SPEED":{"prefix": "OUT_REGMODE_SPEED","body": "OUT_REGMODE_SPEED","description": "#define OUT_REGMODE_SPEED 1"},
    "OUT_REGMODE_SYNC":{"prefix": "OUT_REGMODE_SYNC","body": "OUT_REGMODE_SYNC","description": "#define OUT_REGMODE_SYNC 2"},
    "OUT_REGMODE_POS":{"prefix": "OUT_REGMODE_POS","body": "OUT_REGMODE_POS","description": "#define OUT_REGMODE_POS 4"},
    "UF_UPDATE_MODE":{"prefix": "UF_UPDATE_MODE","body": "UF_UPDATE_MODE","description": "#define UF_UPDATE_MODE 0x01"},
    "UF_UPDATE_SPEED":{"prefix": "UF_UPDATE_SPEED","body": "UF_UPDATE_SPEED","description": "#define UF_UPDATE_SPEED 0x02"},
    "UF_UPDATE_TACHO_LIMIT":{"prefix": "UF_UPDATE_TACHO_LIMIT","body": "UF_UPDATE_TACHO_LIMIT","description": "#define UF_UPDATE_TACHO_LIMIT 0x04"},
    "UF_UPDATE_RESET_COUNT":{"prefix": "UF_UPDATE_RESET_COUNT","body": "UF_UPDATE_RESET_COUNT","description": "#define UF_UPDATE_RESET_COUNT 0x08"},
    "UF_UPDATE_PID_VALUES":{"prefix": "UF_UPDATE_PID_VALUES","body": "UF_UPDATE_PID_VALUES","description": "#define UF_UPDATE_PID_VALUES 0x10"},
    "UF_UPDATE_RESET_BLOCK_COUNT":{"prefix": "UF_UPDATE_RESET_BLOCK_COUNT","body": "UF_UPDATE_RESET_BLOCK_COUNT","description": "#define UF_UPDATE_RESET_BLOCK_COUNT 0x20"},
    "UF_UPDATE_RESET_ROTATION_COUNT":{"prefix": "UF_UPDATE_RESET_ROTATION_COUNT","body": "UF_UPDATE_RESET_ROTATION_COUNT","description": "#define UF_UPDATE_RESET_ROTATION_COUNT 0x40"},
    "UF_PENDING_UPDATES":{"prefix": "UF_PENDING_UPDATES","body": "UF_PENDING_UPDATES","description": "#define UF_PENDING_UPDATES 0x80"}
}