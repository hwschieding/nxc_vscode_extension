{
    "block-comment":{
        "prefix":"/*",
        "body":["$BLOCK_COMMENT_START","\t$0","$BLOCK_COMMENT_END"],
        "description":"Block comment"
    },
    "main":{
        "prefix":["main()"],
        "body":["task main() {", "\t$0", "}"],
        "description": ["task main() {", "\tbody", "]"]
    },
    "for":{
        "prefix":["for()"],
        "body":["for(int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {", "\t$0", "}"],
        "description": ["for(statement1; bool condition; statement2) {", "\tbody", "}"]
    },
    "while":{
        "prefix":"while()",
        "body":["while($1)$0"],
        "description": ["while(bool condition) {", "\tbody", "}"]
    },
    "repeat":{
        "prefix":["repeat()"],
        "body":["repeat($1) {", "\t$0", "}"],
        "description":["repeat(int) {", "\tbody", "}"]
    },
    "do":{
        "prefix":"do",
        "body":["do {", "\t$1", "}$0"],
        "description": ["do {", "\tbody", "} while(bool condition)"]
    },
    "if":{
        "prefix":["if()"],
        "body":["if($1)$0"],
        "description": ["if(bool condition) {", "\tbody", "}"]
    },
    "else":{
        "prefix":["else"],
        "body":"else",
        "description":["else {", "\tbody", "}"]
    },
    "if-else":{
        "prefix":"if-else",
        "body":["if($1) {", "\t$2", "} else {", "\t$0", "}"],
        "description":["if(bool condition) {", "\tbody", "} else {", "\tbody", "}"]
    },
    "switch":{
        "prefix":"switch()",
        "body":["switch($1) {", "\t$0", "}"],
        "description":["switch(expression) {", "\tbody", "}"]
    },
    "case":{
        "prefix":"case",
        "body":["case:", "\t$0"],
        "description":["case:", "\t//do something", "\tbreak;"]
    },
    "default":{
        "prefix":"default",
        "body":["default:", "\t$0"],
        "description":["default:", "\t//do something", "\tbreak;"]
    },
    "break":{
        "prefix":"break",
        "body":"break",
        "description":"break;"
    },
    "continue":{
        "prefix":"continue",
        "body":"continue",
        "description":"continue;"
    },
    "goto":{
        "prefix":"goto",
        "body":"goto $0",
        "description":"goto [label]"
    },
    "until":{
        "prefix":"until()",
        "body":"until($1)$0",
        "description":"until(bool condition)"
    },
    "asm":{
        "prefix":"asm",
        "body":["asm {", "\t$0", "}"],
        "description":["asm {", "\tbody //NBC assembly language", "}"]
    },
    "start":{
        "prefix":"start",
        "body":"start",
        "description":"start [task_name];"
    },
    "stop":{
        "prefix":"stop",
        "body":"stop",
        "description":"stop [task_name]"
    },
    "priority":{
        "prefix":"priority",
        "body":"priority",
        "description":"priority [task_name]"
    },
    "return":{
        "prefix":"return",
        "body":"return",
        "description":"return [expression]"
    },
    "true":{
        "prefix":"true",
        "body":"true",
        "description":"Represents always true condition"
    },
    "false":{
        "prefix":"false",
        "body":"false",
        "description":"Represents always false condition"
    },
    "#include":{
        "prefix":"#include",
        "body":"#include \"$1\"$0",
        "description":"#include \"[filename]\""
    },
    "#define":{
        "prefix":"#define",
        "body":"#define",
        "description": "#define [symbol]"
    },
    "#import":{
        "prefix":"#import",
        "body":"#import \"$1\" $0",
        "description":"#import \"[filename]\" [symbol]"
    },
    "#download":{
        "prefix":"#download",
        "body":"#download \"$1\"$0",
        "description":"#download \"[filename]\""
    },
    "#ifdef":{
        "prefix":"#ifdef",
        "body":"#ifdef",
        "description":"#ifdef [symbol]"
    },
    "#ifndef":{
        "prefix":"#ifndef",
        "body":"#ifndef",
        "description":"#ifndef [symbol]"
    },
    "#else":{
        "prefix":"#else",
        "body":"#else",
        "description":["#else","//switch from compiling to not compiling & vice versa"]
    },
    "#endif":{
        "prefix":"#endif",
        "body":"#endif",
        "description":["#endif","//return to previous compiling state"]
    },
    "#if":{
        "prefix":"#if",
        "body":"#if",
        "description":["#if [condition]"]
    },
    "#elif":{
        "prefix":"#elif",
        "body":"#elif",
        "description":["#elif [condition]"]
    },
    "void":{
        "prefix":"void",
        "body":"void",
        "description":"void [name]"
    },
    "sub":{
        "prefix":"sub",
        "body":"sub",
        "description":"sub [name]"
    },
    "bool":{
        "prefix":"bool",
        "body":"bool",
        "description":"bool [name]"
    },
    "byte":{
        "prefix":"byte",
        "body":"byte",
        "description":"byte [name]"
    },
    "char":{
        "prefix":"char",
        "body":"char",
        "description":"char [name]"
    },
    "int":{
        "prefix":"int",
        "body":"int",
        "description":"int [name]"
    },
    "short":{
        "prefix":"short",
        "body":"short",
        "description":"short [name]"
    },
    "long":{
        "prefix":"long",
        "body":"long",
        "description":"long [name]"
    },
    "float":{
        "prefix":"float",
        "body":"float",
        "description":"float [name]"
    },
    "mutex":{
        "prefix":"mutex",
        "body":"mutex",
        "description":["mutex [name]","/*","\t32-bit value","\tused to synchronize access to resources shared across multiple threads","*/"]
    },
    "string":{
        "prefix":"string",
        "body":"string",
        "description":"string [name]"
    },
    "enum":{
        "prefix":"enum",
        "body":"enum",
        "description":"enum [name]"
    },
    "typedef":{
        "prefix":"typedef",
        "body":"typedef",
        "description":"typedef [type] [name]"
    },
    "struct":{
        "prefix":"struct",
        "body":"struct",
        "description":"struct [name]"
    },
    "unsigned":{
        "prefix":"unsigned",
        "body":"unsigned",
        "description":"unsigned [declaration]"
    },
    "static":{
        "prefix":"static",
        "body":"static",
        "description":"static [declaration]"
    },
    "inline":{
        "prefix":"inline",
        "body":"inline",
        "description":"inline [declaration]"
    },
    "safecall":{
        "prefix":"safecall",
        "body":"safecall",
        "description":"safecall [declaration]"
    },
    "const":{
        "prefix":"const",
        "body":"const",
        "description":"const [declaration]"
    },
    "task":{
        "prefix":"task",
        "body":["task $1() {", "\t$0", "}"],
        "description":["task [name]() {", "\tbody", "}"]
    }
}